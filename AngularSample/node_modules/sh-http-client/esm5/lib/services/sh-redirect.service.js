/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, InjectionToken, Inject } from '@angular/core';
import { Router } from '@angular/router';
import { ShHttpClientConst } from '../constShHttpClient';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/** @type {?} */
export var SH_BROWSER_STORAGE = new InjectionToken("Browser Storage", {
    providedIn: "root",
    factory: (/**
     * @return {?}
     */
    function () { return localStorage; })
});
/** @type {?} */
export var USE_HASH = new InjectionToken('UseHash', {
    providedIn: "root",
    factory: (/**
     * @return {?}
     */
    function () { return ({ useHash: true }); })
});
var ShRedirectService = /** @class */ (function () {
    function ShRedirectService(router, storage, isHash) {
        this.router = router;
        this.storage = storage;
        this.isHash = isHash;
    }
    Object.defineProperty(ShRedirectService.prototype, "redirectPath", {
        get: /**
         * @return {?}
         */
        function () {
            return this.storage.getItem(ShHttpClientConst.REDIRECT_PATH);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShRedirectService.prototype, "queryParams", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var query = new URLSearchParams(this.storage.getItem(ShHttpClientConst.SH_QUERY_PARAMS)) || null;
            return query;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ShRedirectService.prototype.setRedirectPath = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var path = '';
        /** @type {?} */
        var query = '';
        if (this.isHash.useHash) {
            /** @type {?} */
            var pathparams = location.href.split('#')[1].split('?');
            path = pathparams[0];
            query = pathparams[1] || '';
        }
        else {
            path = location.pathname;
            path = location.search;
        }
        this.storage.setItem(ShHttpClientConst.REDIRECT_PATH, path);
        this.storage.setItem(ShHttpClientConst.SH_QUERY_PARAMS, query);
    };
    /**
     * @return {?}
     */
    ShRedirectService.prototype.redirect = /**
     * @return {?}
     */
    function () {
        this.router.navigate([this.storage.getItem(ShHttpClientConst.REDIRECT_PATH)]);
        this.storage.setItem(ShHttpClientConst.REDIRECT_PATH, '');
    };
    ShRedirectService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ShRedirectService.ctorParameters = function () { return [
        { type: Router },
        { type: Storage, decorators: [{ type: Inject, args: [SH_BROWSER_STORAGE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [USE_HASH,] }] }
    ]; };
    /** @nocollapse */ ShRedirectService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ShRedirectService_Factory() { return new ShRedirectService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(SH_BROWSER_STORAGE), i0.ɵɵinject(USE_HASH)); }, token: ShRedirectService, providedIn: "root" });
    return ShRedirectService;
}());
export { ShRedirectService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShRedirectService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ShRedirectService.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    ShRedirectService.prototype.isHash;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtcmVkaXJlY3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWh0dHAtY2xpZW50LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NoLXJlZGlyZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFJekQsTUFBTSxLQUFPLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFVLGlCQUFpQixFQUFFO0lBQzdFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU87OztJQUFFLGNBQU0sT0FBQSxZQUFZLEVBQVosQ0FBWSxDQUFBO0NBQzlCLENBQUM7O0FBRUYsTUFBTSxLQUFPLFFBQVEsR0FBRyxJQUFJLGNBQWMsQ0FBVSxTQUFTLEVBQUU7SUFDM0QsVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTzs7O0lBQUUsY0FBTSxPQUFBLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsRUFBakIsQ0FBaUIsQ0FBQTtDQUNuQyxDQUFDO0FBRUY7SUFJSSwyQkFDWSxNQUFjLEVBQ2MsT0FBZ0IsRUFDMUIsTUFBZTtRQUZqQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2MsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUMxQixXQUFNLEdBQU4sTUFBTSxDQUFTO0lBQzNDLENBQUM7SUFFSCxzQkFBSSwyQ0FBWTs7OztRQUFoQjtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDakUsQ0FBQzs7O09BQUE7SUFDRCxzQkFBSSwwQ0FBVzs7OztRQUFmOztnQkFDVSxLQUFLLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxJQUFJO1lBQ2xHLE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUM7OztPQUFBOzs7O0lBQ00sMkNBQWU7OztJQUF0Qjs7WUFDUSxJQUFJLEdBQUcsRUFBRTs7WUFDVCxLQUFLLEdBQUcsRUFBRTtRQUNkLElBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7O2dCQUNkLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3pELElBQUksR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDL0I7YUFBTTtZQUNILElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQ3pCLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7O0lBRU0sb0NBQVE7OztJQUFmO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUM7O2dCQW5DSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQWpCUSxNQUFNO2dCQXFCc0MsT0FBTyx1QkFBbkQsTUFBTSxTQUFDLGtCQUFrQjtnREFDekIsTUFBTSxTQUFDLFFBQVE7Ozs0QkF2QnhCO0NBb0RDLEFBcENELElBb0NDO1NBakNZLGlCQUFpQjs7Ozs7O0lBRXRCLG1DQUFzQjs7Ozs7SUFDdEIsb0NBQW9EOzs7OztJQUNwRCxtQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFNoSHR0cENsaWVudENvbnN0IH0gZnJvbSAnLi4vY29uc3RTaEh0dHBDbGllbnQnO1xyXG5cclxuZXhwb3J0IHR5cGUgVXNlSGFzaCA9IHt1c2VIYXNoOiBib29sZWFufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNIX0JST1dTRVJfU1RPUkFHRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxTdG9yYWdlPihgQnJvd3NlciBTdG9yYWdlYCwge1xyXG4gICAgcHJvdmlkZWRJbjogYHJvb3RgLFxyXG4gICAgZmFjdG9yeTogKCkgPT4gbG9jYWxTdG9yYWdlIFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBVU0VfSEFTSCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxVc2VIYXNoPignVXNlSGFzaCcsIHtcclxuICAgIHByb3ZpZGVkSW46IGByb290YCxcclxuICAgIGZhY3Rvcnk6ICgpID0+ICh7dXNlSGFzaDogdHJ1ZX0pXHJcbn0pO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaFJlZGlyZWN0U2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxyXG4gICAgICAgIEBJbmplY3QoU0hfQlJPV1NFUl9TVE9SQUdFKSBwcml2YXRlIHN0b3JhZ2U6IFN0b3JhZ2UsXHJcbiAgICAgICAgQEluamVjdChVU0VfSEFTSCkgcHJpdmF0ZSBpc0hhc2g6IFVzZUhhc2hcclxuICAgICl7fVxyXG5cclxuICAgIGdldCByZWRpcmVjdFBhdGgoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldEl0ZW0oU2hIdHRwQ2xpZW50Q29uc3QuUkVESVJFQ1RfUEFUSCk7XHJcbiAgICB9XHJcbiAgICBnZXQgcXVlcnlQYXJhbXMoKTogVVJMU2VhcmNoUGFyYW1zIHwgbnVsbCB7XHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHRoaXMuc3RvcmFnZS5nZXRJdGVtKFNoSHR0cENsaWVudENvbnN0LlNIX1FVRVJZX1BBUkFNUykpIHx8IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldFJlZGlyZWN0UGF0aCgpIHtcclxuICAgICAgICBsZXQgcGF0aCA9ICcnO1xyXG4gICAgICAgIGxldCBxdWVyeSA9ICcnO1xyXG4gICAgICAgIGlmKHRoaXMuaXNIYXNoLnVzZUhhc2gpIHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aHBhcmFtcyA9IGxvY2F0aW9uLmhyZWYuc3BsaXQoJyMnKVsxXS5zcGxpdCgnPycpO1xyXG4gICAgICAgICAgICBwYXRoID0gcGF0aHBhcmFtc1swXTtcclxuICAgICAgICAgICAgcXVlcnkgPSBwYXRocGFyYW1zWzFdIHx8ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhdGggPSBsb2NhdGlvbi5wYXRobmFtZTtcclxuICAgICAgICAgICAgcGF0aCA9IGxvY2F0aW9uLnNlYXJjaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oU2hIdHRwQ2xpZW50Q29uc3QuUkVESVJFQ1RfUEFUSCwgcGF0aCk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oU2hIdHRwQ2xpZW50Q29uc3QuU0hfUVVFUllfUEFSQU1TLCBxdWVyeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZGlyZWN0KCkge1xyXG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFt0aGlzLnN0b3JhZ2UuZ2V0SXRlbShTaEh0dHBDbGllbnRDb25zdC5SRURJUkVDVF9QQVRIKV0pO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKFNoSHR0cENsaWVudENvbnN0LlJFRElSRUNUX1BBVEgsICcnKTtcclxuICAgIH1cclxufSJdfQ==