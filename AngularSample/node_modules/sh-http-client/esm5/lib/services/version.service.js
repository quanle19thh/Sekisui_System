/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ShHttpClientConst, Response } from '../constShHttpClient';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var VersionService = /** @class */ (function () {
    function VersionService(http) {
        this.http = http;
        //versionのキャッシュ
        this.versions = [];
    }
    /**
     * versionの初期化
     */
    /**
     * versionの初期化
     * @param {...?} urls
     * @return {?}
     */
    VersionService.prototype.initVersion = /**
     * versionの初期化
     * @param {...?} urls
     * @return {?}
     */
    function () {
        var urls = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            urls[_i] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!urls)
                            return [2 /*return*/];
                        return [4 /*yield*/, Promise.all(urls.map((/**
                             * @param {?} url
                             * @return {?}
                             */
                            function (url) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var result;
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.fetchVersion(url)];
                                        case 1:
                                            result = _a.sent();
                                            this.setVersionNo(url, result);
                                            return [2 /*return*/];
                                    }
                                });
                            }); })))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * urlからキーを生成
     * @param url
     */
    /**
     * urlからキーを生成
     * @private
     * @param {?} url
     * @return {?}
     */
    VersionService.prototype.getKeyUrl = /**
     * urlからキーを生成
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (!url)
            return "";
        return url.split(ShHttpClientConst.API_URL)[0] + ShHttpClientConst.VERSION_API_URL;
    };
    /**
     * バックエンドのversion情報を取得
     */
    /**
     * バックエンドのversion情報を取得
     * @param {?} url
     * @return {?}
     */
    VersionService.prototype.fetchVersion = /**
     * バックエンドのversion情報を取得
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var s, token;
            return tslib_1.__generator(this, function (_a) {
                s = this.splitByApiUrl(url);
                token = sessionStorage.getItem("" + ShHttpClientConst.AUTHORIZATION_TOKEN);
                return [2 /*return*/, this.http.get(s, { observe: Response, headers: { "Authorization": token ? ShHttpClientConst.Bearer + token : ShHttpClientConst.Bearer } }).toPromise()
                        .then((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        if (response.body.redirectURL == ShHttpClientConst.RELOAD) {
                            setTimeout((/**
                             * @return {?}
                             */
                            function () { location.reload(); }), 100);
                        }
                        else if ((response.body.redirectURL || "").indexOf(ShHttpClientConst.HTTP) != -1) {
                            setTimeout((/**
                             * @return {?}
                             */
                            function () { location.href = response.body.redirectURL; }), 100);
                        }
                        return response.body.applicationData ? response.body.applicationData.versionNo : "";
                    }))];
            });
        });
    };
    /**
     * urlをsplitした値を返す
     */
    /**
     * urlをsplitした値を返す
     * @private
     * @param {?} url
     * @return {?}
     */
    VersionService.prototype.splitByApiUrl = /**
     * urlをsplitした値を返す
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return url.split(ShHttpClientConst.API_URL)[0] + ShHttpClientConst.VERSION_API_URL || '';
    };
    /**
     * キャッシュしているversionをURLから取得する
     * @param url
     */
    /**
     * キャッシュしているversionをURLから取得する
     * @param {?} url
     * @return {?}
     */
    VersionService.prototype.getVersion = /**
     * キャッシュしているversionをURLから取得する
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var keyUrl, projectVersion, version;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyUrl = this.getKeyUrl(url);
                        projectVersion = this.versions
                            .find((/**
                         * @param {?} value
                         * @return {?}
                         */
                        function (value) {
                            return value.keyUrl === keyUrl;
                        }));
                        if (!!projectVersion) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fetchVersion(url)
                            // //キャッシュする
                        ];
                    case 1:
                        version = _a.sent();
                        // //キャッシュする
                        this.setVersionNo(url, version);
                        return [2 /*return*/, version];
                    case 2: return [2 /*return*/, projectVersion.version];
                }
            });
        });
    };
    /**
     * 受け取ったversionNoをキャッシュする
     * @param url apiUrl
     * @param versionNo バックエンドのversion
     */
    /**
     * 受け取ったversionNoをキャッシュする
     * @param {?} url apiUrl
     * @param {?} versionNo バックエンドのversion
     * @return {?}
     */
    VersionService.prototype.setVersionNo = /**
     * 受け取ったversionNoをキャッシュする
     * @param {?} url apiUrl
     * @param {?} versionNo バックエンドのversion
     * @return {?}
     */
    function (url, versionNo) {
        /** @type {?} */
        var keyUrl = this.getKeyUrl(url);
        if (!keyUrl || !versionNo)
            return;
        /** @type {?} */
        var result = this.versions.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.keyUrl == keyUrl; }));
        if (result != -1) {
            this.versions[result] = { keyUrl: keyUrl, version: versionNo };
        }
        else {
            this.versions.push({ keyUrl: keyUrl, version: versionNo });
        }
    };
    VersionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    VersionService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ VersionService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function VersionService_Factory() { return new VersionService(i0.ɵɵinject(i1.HttpClient)); }, token: VersionService, providedIn: "root" });
    return VersionService;
}());
export { VersionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    VersionService.prototype.versions;
    /**
     * @type {?}
     * @private
     */
    VersionService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,