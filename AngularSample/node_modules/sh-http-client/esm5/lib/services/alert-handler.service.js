/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { Alert } from '../utilities/Alert';
import * as i0 from "@angular/core";
var AlertHandlerService = /** @class */ (function () {
    /**
     * コンストラクタ
     */
    function AlertHandlerService() {
        this.Alert = new Alert();
        this.AlertHandlerSubject = new Subject();
        this.AlertHandlerState = this.AlertHandlerSubject.asObservable();
    }
    /**
    * アラートを追加する
    * @param validationType 検証結果タイプ
    * @param validationMessages 検証結果メッセージ配列
    */
    /**
     * アラートを追加する
     * @param {?} alertInfo
     * @return {?}
     */
    AlertHandlerService.prototype.setAlert = /**
     * アラートを追加する
     * @param {?} alertInfo
     * @return {?}
     */
    function (alertInfo) {
        this.Alert = alertInfo;
        this.AlertHandlerSubject.next(this.Alert);
    };
    /**
     * アラートをクリアする
     */
    /**
     * アラートをクリアする
     * @return {?}
     */
    AlertHandlerService.prototype.alertClear = /**
     * アラートをクリアする
     * @return {?}
     */
    function () {
        this.Alert.message = "";
        this.Alert.type = "";
        this.AlertHandlerSubject.next(this.Alert);
    };
    AlertHandlerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AlertHandlerService.ctorParameters = function () { return []; };
    /** @nocollapse */ AlertHandlerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AlertHandlerService_Factory() { return new AlertHandlerService(); }, token: AlertHandlerService, providedIn: "root" });
    return AlertHandlerService;
}());
export { AlertHandlerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertHandlerService.prototype.Alert;
    /**
     * @type {?}
     * @private
     */
    AlertHandlerService.prototype.AlertHandlerSubject;
    /** @type {?} */
    AlertHandlerService.prototype.AlertHandlerState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtaGFuZGxlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtaHR0cC1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYWxlcnQtaGFuZGxlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUUzQztJQVNFOztPQUVHO0lBQ0g7UUFQUSxVQUFLLEdBQVUsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUMzQix3QkFBbUIsR0FBRyxJQUFJLE9BQU8sRUFBUyxDQUFDO1FBQzVDLHNCQUFpQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUtuRCxDQUFDO0lBRWpCOzs7O01BSUU7Ozs7OztJQUNLLHNDQUFROzs7OztJQUFmLFVBQWdCLFNBQWdCO1FBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVDLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSx3Q0FBVTs7OztJQUFqQjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUMsQ0FBQzs7Z0JBakNGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7OzhCQU5EO0NBc0NDLEFBbENELElBa0NDO1NBL0JZLG1CQUFtQjs7Ozs7O0lBRTlCLG9DQUFtQzs7Ozs7SUFDbkMsa0RBQW1EOztJQUNuRCxnREFBbUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQWxlcnQgfSBmcm9tICcuLi91dGlsaXRpZXMvQWxlcnQnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQWxlcnRIYW5kbGVyU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgQWxlcnQ6IEFsZXJ0ID0gbmV3IEFsZXJ0KCk7XHJcbiAgcHJpdmF0ZSBBbGVydEhhbmRsZXJTdWJqZWN0ID0gbmV3IFN1YmplY3Q8QWxlcnQ+KCk7XHJcbiAgcHVibGljIEFsZXJ0SGFuZGxlclN0YXRlID0gdGhpcy5BbGVydEhhbmRsZXJTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAvKipcclxuICAqIOOCouODqeODvOODiOOCkui/veWKoOOBmeOCi1xyXG4gICogQHBhcmFtIHZhbGlkYXRpb25UeXBlIOaknOiovOe1kOaenOOCv+OCpOODl1xyXG4gICogQHBhcmFtIHZhbGlkYXRpb25NZXNzYWdlcyDmpJzoqLzntZDmnpzjg6Hjg4Pjgrvjg7zjgrjphY3liJdcclxuICAqL1xyXG4gIHB1YmxpYyBzZXRBbGVydChhbGVydEluZm86IEFsZXJ0KSB7XHJcbiAgICB0aGlzLkFsZXJ0ID0gYWxlcnRJbmZvO1xyXG4gICAgdGhpcy5BbGVydEhhbmRsZXJTdWJqZWN0Lm5leHQodGhpcy5BbGVydCk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Ki44Op44O844OI44KS44Kv44Oq44Ki44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIGFsZXJ0Q2xlYXIoKSB7XHJcbiAgICB0aGlzLkFsZXJ0Lm1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgdGhpcy5BbGVydC50eXBlID0gXCJcIjtcclxuICAgIHRoaXMuQWxlcnRIYW5kbGVyU3ViamVjdC5uZXh0KHRoaXMuQWxlcnQpO1xyXG5cclxuICB9XHJcbn1cclxuIl19