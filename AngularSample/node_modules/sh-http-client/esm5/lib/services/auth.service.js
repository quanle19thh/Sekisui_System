/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { ShHttpClientConst } from '../constShHttpClient';
import { ShHttpClientService } from './sh-http-client.service';
import * as i0 from "@angular/core";
import * as i1 from "./sh-http-client.service";
var AuthService = /** @class */ (function () {
    function AuthService(http) {
        this.http = http;
    }
    /**
     * 認証済みかの判定
     */
    /**
     * 認証済みかの判定
     * @return {?}
     */
    AuthService.prototype.isAuthenticated = /**
     * 認証済みかの判定
     * @return {?}
     */
    function () {
        this.token = sessionStorage.getItem("" + ShHttpClientConst.AUTHORIZATION_TOKEN);
        if (this.token) {
            return of(true);
        }
        else {
            return of(false);
        }
    };
    /**
     * 認証
     * @param jigCode
     * @param tanCode
     * @param password
     */
    /**
     * 認証
     * @param {?} jigCode
     * @param {?} tanCode
     * @param {?} password
     * @return {?}
     */
    AuthService.prototype.login = /**
     * 認証
     * @param {?} jigCode
     * @param {?} tanCode
     * @param {?} password
     * @return {?}
     */
    function (jigCode, tanCode, password) {
        //実際はデータベースなり、ユーザー管理するサービスなりに問い合わせて戻り値を返す
        //サーバーとの通信の結果をlacalStorageへ保存（今は仮実装）
        sessionStorage.setItem(ShHttpClientConst.AUTHORIZATION_TOKEN, jigCode + tanCode + password);
        //通信の結果で分岐する
        if (true) {
            return of(true);
        }
        else {
            /**認証失敗時 */
            return of(false);
        }
    };
    /**
     * ログアウト
     * リダイレクトはガードで行う
     */
    /**
     * ログアウト
     * リダイレクトはガードで行う
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.logout = /**
     * ログアウト
     * リダイレクトはガードで行う
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.http.get(url).then((/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
            sessionStorage.removeItem(ShHttpClientConst.AUTHORIZATION_TOKEN);
        }));
    };
    AuthService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AuthService.ctorParameters = function () { return [
        { type: ShHttpClientService }
    ]; };
    /** @nocollapse */ AuthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.ɵɵinject(i1.ShHttpClientService)); }, token: AuthService, providedIn: "root" });
    return AuthService;
}());
export { AuthService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.token;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtaHR0cC1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxFQUFFLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQUUvRDtJQUtFLHFCQUFvQixJQUF5QjtRQUF6QixTQUFJLEdBQUosSUFBSSxDQUFxQjtJQUFFLENBQUM7SUFDaEQ7O09BRUc7Ozs7O0lBQ0gscUNBQWU7Ozs7SUFBZjtRQUNFLElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFHLGlCQUFpQixDQUFDLG1CQUFxQixDQUFDLENBQUM7UUFDaEYsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xCO0lBRUgsQ0FBQztJQUNEOzs7OztPQUtHOzs7Ozs7OztJQUNILDJCQUFLOzs7Ozs7O0lBQUwsVUFBTSxPQUFlLEVBQUUsT0FBZSxFQUFFLFFBQWdCO1FBQ3RELHlDQUF5QztRQUN6QyxvQ0FBb0M7UUFDcEMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLEdBQUcsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQzVGLFlBQVk7UUFDWixJQUFJLElBQUksRUFBRTtZQUNSLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCO2FBQ0k7WUFDSCxXQUFXO1lBQ1gsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBQ0Q7OztPQUdHOzs7Ozs7O0lBQ0ksNEJBQU07Ozs7OztJQUFiLFVBQWMsR0FBVztRQUN2QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLENBQUM7WUFDOUIsY0FBYyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25FLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBN0NGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBSlEsbUJBQW1COzs7c0JBSDVCO0NBbURDLEFBOUNELElBOENDO1NBM0NZLFdBQVc7Ozs7OztJQUN0Qiw0QkFBc0I7Ozs7O0lBQ1YsMkJBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBvZiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBTaEh0dHBDbGllbnRDb25zdCB9IGZyb20gJy4uL2NvbnN0U2hIdHRwQ2xpZW50JztcclxuaW1wb3J0IHsgU2hIdHRwQ2xpZW50U2VydmljZSB9IGZyb20gJy4vc2gtaHR0cC1jbGllbnQuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdXRoU2VydmljZSB7XHJcbiAgcHJpdmF0ZSB0b2tlbjogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogU2hIdHRwQ2xpZW50U2VydmljZSl7fVxyXG4gIC8qKlxyXG4gICAqIOiqjeiovOa4iOOBv+OBi+OBruWIpOWumlxyXG4gICAqL1xyXG4gIGlzQXV0aGVudGljYXRlZCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHRoaXMudG9rZW4gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGAke1NoSHR0cENsaWVudENvbnN0LkFVVEhPUklaQVRJT05fVE9LRU59YCk7XHJcbiAgICBpZiAodGhpcy50b2tlbikge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gb2YoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbiAgLyoqXHJcbiAgICog6KqN6Ki8XHJcbiAgICogQHBhcmFtIGppZ0NvZGUgXHJcbiAgICogQHBhcmFtIHRhbkNvZGUgXHJcbiAgICogQHBhcmFtIHBhc3N3b3JkIFxyXG4gICAqL1xyXG4gIGxvZ2luKGppZ0NvZGU6IHN0cmluZywgdGFuQ29kZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAvL+Wun+mam+OBr+ODh+ODvOOCv+ODmeODvOOCueOBquOCiuOAgeODpuODvOOCtuODvOeuoeeQhuOBmeOCi+OCteODvOODk+OCueOBquOCiuOBq+WVj+OBhOWQiOOCj+OBm+OBpuaIu+OCiuWApOOCkui/lOOBmVxyXG4gICAgLy/jgrXjg7zjg5Djg7zjgajjga7pgJrkv6Hjga7ntZDmnpzjgpJsYWNhbFN0b3JhZ2Xjgbjkv53lrZjvvIjku4rjga/ku67lrp/oo4XvvIlcclxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU2hIdHRwQ2xpZW50Q29uc3QuQVVUSE9SSVpBVElPTl9UT0tFTiwgamlnQ29kZSArIHRhbkNvZGUgKyBwYXNzd29yZCk7XHJcbiAgICAvL+mAmuS/oeOBrue1kOaenOOBp+WIhuWykOOBmeOCi1xyXG4gICAgaWYgKHRydWUpIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8qKuiqjeiovOWkseaVl+aZgiAqL1xyXG4gICAgICByZXR1cm4gb2YoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDjg63jgrDjgqLjgqbjg4hcclxuICAgKiDjg6rjg4DjgqTjg6zjgq/jg4jjga/jgqzjg7zjg4njgafooYzjgYZcclxuICAgKi9cclxuICBwdWJsaWMgbG9nb3V0KHVybDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpLnRoZW4oXyA9PiB7XHJcbiAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oU2hIdHRwQ2xpZW50Q29uc3QuQVVUSE9SSVpBVElPTl9UT0tFTik7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19