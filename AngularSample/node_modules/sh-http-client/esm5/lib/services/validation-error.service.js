/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
var ValidationError = /** @class */ (function () {
    function ValidationError() {
    }
    return ValidationError;
}());
if (false) {
    /** @type {?} */
    ValidationError.prototype.show;
    /** @type {?} */
    ValidationError.prototype.meesages;
}
var ValidationErrorService = /** @class */ (function () {
    function ValidationErrorService() {
        this.validationError = new ValidationError();
        this.validationErrorSubject = new Subject();
        this.validationErrorState = this.validationErrorSubject.asObservable();
    }
    /**
     * @param {?} validationErrors
     * @return {?}
     */
    ValidationErrorService.prototype.setValidationError = /**
     * @param {?} validationErrors
     * @return {?}
     */
    function (validationErrors) {
        this.validationError.show = true;
        this.validationError.meesages = validationErrors;
        this.validationErrorSubject.next(this.validationError);
    };
    /**
     * @return {?}
     */
    ValidationErrorService.prototype.clearValidationError = /**
     * @return {?}
     */
    function () {
        this.validationError.show = false;
        this.validationError.meesages = null;
        this.validationErrorSubject.next(this.validationError);
    };
    ValidationErrorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ValidationErrorService.ctorParameters = function () { return []; };
    /** @nocollapse */ ValidationErrorService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ValidationErrorService_Factory() { return new ValidationErrorService(); }, token: ValidationErrorService, providedIn: "root" });
    return ValidationErrorService;
}());
export { ValidationErrorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidationErrorService.prototype.validationError;
    /**
     * @type {?}
     * @private
     */
    ValidationErrorService.prototype.validationErrorSubject;
    /** @type {?} */
    ValidationErrorService.prototype.validationErrorState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1lcnJvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtaHR0cC1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdmFsaWRhdGlvbi1lcnJvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBRS9CO0lBQUE7SUFHQSxDQUFDO0lBQUQsc0JBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQzs7O0lBRkMsK0JBQWE7O0lBQ2IsbUNBQWE7O0FBR2Y7SUFPRTtRQUhRLG9CQUFlLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUN4QywyQkFBc0IsR0FBRyxJQUFJLE9BQU8sRUFBbUIsQ0FBQztRQUN6RCx5QkFBb0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxFQUFFLENBQUE7SUFDeEQsQ0FBQzs7Ozs7SUFFVixtREFBa0I7Ozs7SUFBekIsVUFBMEIsZ0JBQXFCO1FBQzdDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUN4RCxDQUFDOzs7O0lBRU0scURBQW9COzs7SUFBM0I7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7O2dCQW5CRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7OztpQ0FWRDtDQTRCQyxBQXBCRCxJQW9CQztTQWpCWSxzQkFBc0I7Ozs7OztJQUNqQyxpREFBZ0Q7Ozs7O0lBQ2hELHdEQUFnRTs7SUFDaEUsc0RBQXdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5jbGFzcyBWYWxpZGF0aW9uRXJyb3Ige1xyXG4gIHNob3c6IGJvb2xlYW5cclxuICBtZWVzYWdlczogYW55XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25FcnJvclNlcnZpY2Uge1xyXG4gIHByaXZhdGUgdmFsaWRhdGlvbkVycm9yID0gbmV3IFZhbGlkYXRpb25FcnJvcigpO1xyXG4gIHByaXZhdGUgdmFsaWRhdGlvbkVycm9yU3ViamVjdCA9IG5ldyBTdWJqZWN0PFZhbGlkYXRpb25FcnJvcj4oKTtcclxuICBwdWJsaWMgdmFsaWRhdGlvbkVycm9yU3RhdGUgPSB0aGlzLnZhbGlkYXRpb25FcnJvclN1YmplY3QuYXNPYnNlcnZhYmxlKClcclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBwdWJsaWMgc2V0VmFsaWRhdGlvbkVycm9yKHZhbGlkYXRpb25FcnJvcnM6IGFueSkge1xyXG4gICAgdGhpcy52YWxpZGF0aW9uRXJyb3Iuc2hvdyA9IHRydWU7XHJcbiAgICB0aGlzLnZhbGlkYXRpb25FcnJvci5tZWVzYWdlcyA9IHZhbGlkYXRpb25FcnJvcnM7XHJcbiAgICB0aGlzLnZhbGlkYXRpb25FcnJvclN1YmplY3QubmV4dCh0aGlzLnZhbGlkYXRpb25FcnJvcilcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhclZhbGlkYXRpb25FcnJvcigpIHtcclxuICAgIHRoaXMudmFsaWRhdGlvbkVycm9yLnNob3cgPSBmYWxzZTtcclxuICAgIHRoaXMudmFsaWRhdGlvbkVycm9yLm1lZXNhZ2VzID0gbnVsbDtcclxuICAgIHRoaXMudmFsaWRhdGlvbkVycm9yU3ViamVjdC5uZXh0KHRoaXMudmFsaWRhdGlvbkVycm9yKTtcclxuICB9XHJcbn1cclxuIl19