/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ShHttpClientService } from './sh-http-client.service';
import { Router, NavigationEnd } from '@angular/router';
import * as i0 from "@angular/core";
import * as i1 from "./sh-http-client.service";
import * as i2 from "@angular/router";
var LoggerService = /** @class */ (function () {
    function LoggerService(http, router) {
        this.http = http;
        this.router = router;
        this.isBackButton = false;
        this.config = { url: '', useHash: true };
    }
    /**
     * logApiへリクエスト
     *
     */
    /**
     * logApiへリクエスト
     *
     * @private
     * @param {?} param
     * @return {?}
     */
    LoggerService.prototype.push = /**
     * logApiへリクエスト
     *
     * @private
     * @param {?} param
     * @return {?}
     */
    function (param) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.http.post(this.config.url, param)];
            });
        });
    };
    /**
     * 設定を更新
     */
    /**
     * 設定を更新
     * @template THIS
     * @this {THIS}
     * @param {?} config
     * @return {THIS}
     */
    LoggerService.prototype.configure = /**
     * 設定を更新
     * @template THIS
     * @this {THIS}
     * @param {?} config
     * @return {THIS}
     */
    function (config) {
        var url = config.url, useHash = config.useHash;
        if (url) {
            (/** @type {?} */ (this)).config.url = url;
        }
        if (useHash !== undefined && useHash !== null) {
            (/** @type {?} */ (this)).config.useHash = useHash;
        }
        return (/** @type {?} */ (this));
    };
    /**
     * 画面遷移が発生するたびにlogging
     */
    /**
     * 画面遷移が発生するたびにlogging
     * @return {?}
     */
    LoggerService.prototype.trackingPath = /**
     * 画面遷移が発生するたびにlogging
     * @return {?}
     */
    function () {
        var _this = this;
        this.router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var path, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(event instanceof NavigationEnd)) return [3 /*break*/, 2];
                        if (this.isBackButton) {
                            this.isBackButton = false;
                            return [2 /*return*/];
                        }
                        path = this.config.useHash
                            ? "#" + event.urlAfterRedirects
                            : event.urlAfterRedirects.replace('/', '');
                        return [4 /*yield*/, this.push({ path: path })];
                    case 1:
                        result = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); }));
    };
    /**
     * actionlog pathは必須のため必ず送られる
     */
    /**
     * actionlog pathは必須のため必ず送られる
     * @param {?} action
     * @return {?}
     */
    LoggerService.prototype.action = /**
     * actionlog pathは必須のため必ず送られる
     * @param {?} action
     * @return {?}
     */
    function (action) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.config.useHash
                            ? "#" + this.router.url
                            : this.router.url.replace('/', '');
                        return [4 /*yield*/, this.push({ path: path, action: action })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    LoggerService.prototype.stopLoggingPath = /**
     *
     * @return {?}
     */
    function () {
        this.isBackButton = true;
    };
    LoggerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LoggerService.ctorParameters = function () { return [
        { type: ShHttpClientService },
        { type: Router }
    ]; };
    /** @nocollapse */ LoggerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LoggerService_Factory() { return new LoggerService(i0.ɵɵinject(i1.ShHttpClientService), i0.ɵɵinject(i2.Router)); }, token: LoggerService, providedIn: "root" });
    return LoggerService;
}());
export { LoggerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.isBackButton;
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zaC1odHRwLWNsaWVudC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9sb2dnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQVl4RDtJQU1FLHVCQUNVLElBQXlCLEVBQ3pCLE1BQWM7UUFEZCxTQUFJLEdBQUosSUFBSSxDQUFxQjtRQUN6QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSmhCLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLFdBQU0sR0FBVyxFQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDO0lBSTlDLENBQUM7SUFDTDs7O09BR0c7Ozs7Ozs7O0lBQ1csNEJBQUk7Ozs7Ozs7SUFBbEIsVUFBbUIsS0FBZTs7O2dCQUNoQyxzQkFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBQzs7O0tBQy9DO0lBQ0Q7O09BRUc7Ozs7Ozs7O0lBQ0ksaUNBQVM7Ozs7Ozs7SUFBaEIsVUFBaUIsTUFBd0I7UUFDL0IsSUFBQSxnQkFBRyxFQUFFLHdCQUFPO1FBQ3BCLElBQUcsR0FBRyxFQUFFO1lBQ04sbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7U0FDdkI7UUFDRCxJQUFHLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtZQUM1QyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztTQUMvQjtRQUNELE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDO0lBQ0Q7O09BRUc7Ozs7O0lBQ0ksb0NBQVk7Ozs7SUFBbkI7UUFBQSxpQkFhQztRQVpDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFPLEtBQUs7Ozs7OzZCQUNwQyxDQUFBLEtBQUssWUFBWSxhQUFhLENBQUEsRUFBOUIsd0JBQThCO3dCQUMvQixJQUFHLElBQUksQ0FBQyxZQUFZLEVBQUM7NEJBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDOzRCQUMxQixzQkFBTzt5QkFDUjt3QkFDSyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzRCQUM5QixDQUFDLENBQUMsTUFBSSxLQUFLLENBQUMsaUJBQW1COzRCQUMvQixDQUFDLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO3dCQUM3QixxQkFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBQyxFQUFBOzt3QkFBaEMsTUFBTSxHQUFHLFNBQXVCOzs7OzthQUV6QyxFQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0Q7O09BRUc7Ozs7OztJQUNVLDhCQUFNOzs7OztJQUFuQixVQUFvQixNQUFjOzs7Ozs7d0JBQzFCLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87NEJBQzlCLENBQUMsQ0FBQyxNQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBSzs0QkFDdkIsQ0FBQyxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO3dCQUNyQyxxQkFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxNQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUMsQ0FBQyxFQUFBOzt3QkFBL0IsU0FBK0IsQ0FBQzs7Ozs7S0FDakM7SUFDRDs7T0FFRzs7Ozs7SUFDSSx1Q0FBZTs7OztJQUF0QjtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7O2dCQTdERixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQWZRLG1CQUFtQjtnQkFDbkIsTUFBTTs7O3dCQUZmO0NBNkVDLEFBL0RELElBK0RDO1NBNURZLGFBQWE7Ozs7OztJQUN4QixxQ0FBNkI7Ozs7O0lBQzdCLCtCQUFrRDs7Ozs7SUFFaEQsNkJBQWlDOzs7OztJQUNqQywrQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNoSHR0cENsaWVudFNlcnZpY2UgfSBmcm9tICcuL3NoLWh0dHAtY2xpZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuXHJcbnR5cGUgbG9nUGFyYW0gPSB7XHJcbiAgcGF0aDogc3RyaW5nXHJcbiAgYWN0aW9uPzogc3RyaW5nXHJcbn1cclxudHlwZSBjb25maWcgPSB7XHJcbiAgdXJsIDpzdHJpbmdcclxuICB1c2VIYXNoOiBib29sZWFuXHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIExvZ2dlclNlcnZpY2Uge1xyXG4gIHByaXZhdGUgaXNCYWNrQnV0dG9uID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBjb25maWc6IGNvbmZpZyA9IHt1cmw6ICcnLCB1c2VIYXNoOiB0cnVlfTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogU2hIdHRwQ2xpZW50U2VydmljZSxcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgKSB7IH1cclxuICAvKipcclxuICAgKiBsb2dBcGnjgbjjg6rjgq/jgqjjgrnjg4hcclxuICAgKiBcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIHB1c2gocGFyYW06IGxvZ1BhcmFtKSB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy5jb25maWcudXJsLCBwYXJhbSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOioreWumuOCkuabtOaWsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25maWd1cmUoY29uZmlnIDogUGFydGlhbDxjb25maWc+KSB7XHJcbiAgICBjb25zdCB7IHVybCwgdXNlSGFzaCB9ID0gY29uZmlnO1xyXG4gICAgaWYodXJsKSB7XHJcbiAgICAgIHRoaXMuY29uZmlnLnVybCA9IHVybDtcclxuICAgIH1cclxuICAgIGlmKHVzZUhhc2ggIT09IHVuZGVmaW5lZCAmJiB1c2VIYXNoICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuY29uZmlnLnVzZUhhc2ggPSB1c2VIYXNoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOeUu+mdoumBt+enu+OBjOeZuueUn+OBmeOCi+OBn+OBs+OBq2xvZ2dpbmdcclxuICAgKi9cclxuICBwdWJsaWMgdHJhY2tpbmdQYXRoKCkge1xyXG4gICAgdGhpcy5yb3V0ZXIuZXZlbnRzLnN1YnNjcmliZShhc3luYyAoZXZlbnQpID0+IHtcclxuICAgICAgaWYoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKXtcclxuICAgICAgICBpZih0aGlzLmlzQmFja0J1dHRvbil7XHJcbiAgICAgICAgICB0aGlzLmlzQmFja0J1dHRvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5jb25maWcudXNlSGFzaCBcclxuICAgICAgICAgID8gYCMke2V2ZW50LnVybEFmdGVyUmVkaXJlY3RzfWBcclxuICAgICAgICAgIDogZXZlbnQudXJsQWZ0ZXJSZWRpcmVjdHMucmVwbGFjZSgnLycsICcnKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnB1c2goe3BhdGh9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIGFjdGlvbmxvZyBwYXRo44Gv5b+F6aCI44Gu44Gf44KB5b+F44Ga6YCB44KJ44KM44KLXHJcbiAgICovXHJcbiAgcHVibGljIGFzeW5jIGFjdGlvbihhY3Rpb246IHN0cmluZykge1xyXG4gICAgY29uc3QgcGF0aCA9IHRoaXMuY29uZmlnLnVzZUhhc2hcclxuICAgICAgPyBgIyR7dGhpcy5yb3V0ZXIudXJsfWBcclxuICAgICAgOiAgdGhpcy5yb3V0ZXIudXJsLnJlcGxhY2UoJy8nLCAnJyk7XHJcbiAgICBhd2FpdCB0aGlzLnB1c2goe3BhdGgsIGFjdGlvbn0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBcclxuICAgKi9cclxuICBwdWJsaWMgc3RvcExvZ2dpbmdQYXRoKCkge1xyXG4gICAgdGhpcy5pc0JhY2tCdXR0b24gPSB0cnVlO1xyXG4gIH1cclxuICBcclxufVxyXG4iXX0=