import { HttpClient } from '@angular/common/http';
import { VersionService } from './version.service';
import { AlertHandlerService } from './alert-handler.service';
import { ValidationErrorService } from './validation-error.service';
import { ApiResponseBody } from '../utilities/ApiResponseBody';
import { ShRedirectService } from './sh-redirect.service';
export declare class ShHttpClientService {
    private http;
    private versionService;
    private alertHandlerService;
    private validationErrorService;
    private redirectService;
    constructor(http: HttpClient, versionService: VersionService, alertHandlerService: AlertHandlerService, validationErrorService: ValidationErrorService, redirectService: ShRedirectService);
    /**
     * AccessTokenの有無を返す
     */
    readonly hasToken: boolean;
    /**
     * httpOptionを返す
     * @param versionNo
     */
    private getOption;
    /**
    * GET
    * @param apiResponseBody レスポンスBody情報
    * @return レスポンスBody内のbody句
    */
    private getApiResponseBody;
    /**
     * 認証済みかどうか
     */
    private isAuthenticate;
    /**
    * GET
    * @param url ApiUrl
    * @return API返却結果
    */
    get<T>(url: string, showValidationResult?: boolean): Promise<ApiResponseBody<T>>;
    /**
    * POST
    * @param url ApiUrl
    * @param data データ
    * @return API返却結果
    */
    post<T>(url: string, data: any, showValidationResult?: boolean): Promise<ApiResponseBody<T>>;
    /**
    * PUT
    * @param url ApiUrl
    * @param data データ
    * @return API返却結果
    */
    put<T>(url: string, data: any, showValidationResult?: boolean): Promise<ApiResponseBody<T>>;
    /**
    * DELETE
    * @param url ApiUrl
    * @return API返却結果
    */
    delete<T>(url: string, showValidationResult?: boolean): Promise<ApiResponseBody<T>>;
    /**
     * エラーハンドラ
     * @param operation どの処理でエラーが起きたか
     * @param result 空の配列か指定無しを返して処理を継続させる
     */
    private handleError;
    /**
     * urlをエンコードする。インターステージ用の対応
     * @param url
     */
    private encodeUrl;
}
