{"version":3,"file":"sh-http-client.js","sources":["ng://sh-http-client/lib/utilities/Alert.ts","ng://sh-http-client/lib/utilities/ApiResponseBody.ts","ng://sh-http-client/lib/utilities/ApiResponse.ts","ng://sh-http-client/lib/utilities/ShMessage.ts","ng://sh-http-client/lib/constShHttpClient.ts","ng://sh-http-client/lib/services/version.service.ts","ng://sh-http-client/lib/services/alert-handler.service.ts","ng://sh-http-client/lib/services/validation-error.service.ts","ng://sh-http-client/lib/services/sh-redirect.service.ts","ng://sh-http-client/lib/services/sh-http-client.service.ts","ng://sh-http-client/lib/services/auth.service.ts","ng://sh-http-client/lib/services/navigation.service.ts","ng://sh-http-client/lib/services/logger.service.ts","ng://sh-http-client/lib/guards/auth.guard.ts","ng://sh-http-client/lib/guards/navigation.guard.ts","ng://sh-http-client/lib/sh-http-client.module.ts"],"sourcesContent":["//@dynamic\r\nexport class Alert {\r\n  public type: string;\r\n  public dismissSeconds: number;\r\n  public message: string;\r\n}\r\n","import { Alert } from './Alert';\r\n\r\n//@dynamic\r\nexport class ApiResponseBody<T> {\r\n  //OK or NG\r\n  public result: string;\r\n  //NGã®å ´åã«ç»é¢ã«è¡¨ç¤ºããã¡ãã»ã¼ã¸æè¨\r\n  public message: string;\r\n  //reload or è»¢éåURL\r\n  public redirectURL: string;\r\n\r\n  //ç»é¢å¨ä½ã¸ã®ã¢ã©ã¼ãæç¡\r\n  public hasAlert: boolean;\r\n  //ç»é¢é ç®ã®å¥åå¤æ¤è¨¼ã¨ã©ã¼æç¡\r\n  public hasValidationErrors: boolean;\r\n\r\n  //ã¢ã©ã¼ãè¡¨ç¤ºå¶å¾¡åå®¹\r\n  public alert: Alert;\r\n  //å¥åå¤æ¤è¨¼è¡¨ç¤ºå¶å¾¡åå®¹\r\n  public validationErrors: any;\r\n\r\n  //ãã¼ã¿é¨\r\n  public applicationData: T;\r\n}\r\n","import { ApiResponseBody } from './ApiResponseBody';\r\n\r\n//@dynamic\r\nexport class ApiResponse<T> {\r\n  public status: number;\r\n  public body: ApiResponseBody<T>;\r\n}\r\n","\r\nexport class SHMessageUtl {\r\n  /**\r\n  * ãã³ãã¬ã¼ãæå­åãå½¢å¼ï¼{0}{1}{2}\r\n  */\r\n  public stringFormat(text: string, ...values): string {\r\n    let result = text;\r\n    values.forEach(function (value, i) {\r\n      result = result.split(`{${i}}`).join(value);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\nexport class SHMessageConfirm extends SHMessageUtl {\r\n\r\n  /**\r\n  * å®è¡ç¢ºèªã¡ãã»ã¼ã¸\r\n  */\r\n  public execution(text: string): string {\r\n    return this.stringFormat(\"{0}ãè¡ãã¾ãã\\nããããã§ããï¼\", text);\r\n  }\r\n\r\n  /**\r\n  * çµäºç¢ºèªã¡ãã»ã¼ã¸\r\n  */\r\n  public finalization(text: string): string {\r\n    return this.stringFormat(\"{0}ãçµäºãã¾ãã\\nããããã§ããï¼\", text);\r\n  }\r\n\r\n  /**\r\n  * ç»é²ç¢ºèªã¡ãã»ã¼ã¸\r\n  */\r\n  public creatingRecord(): string {\r\n    return this.execution(\"ç»é²\");\r\n  }\r\n\r\n  /**\r\n  * ä¿®æ­£ç¢ºèªã¡ãã»ã¼ã¸\r\n  */\r\n  public editingRecord(): string {\r\n    return this.execution(\"ä¿®æ­£\");\r\n  }\r\n\r\n  /**\r\n  * åé¤ç¢ºèªã¡ãã»ã¼ã¸\r\n  */\r\n  public deletingRecord(): string {\r\n    return this.execution(\"åé¤\");\r\n  }\r\n\r\n  /**\r\n  * æ´æ°ç¢ºèªã¡ãã»ã¼ã¸\r\n  */\r\n  public updatingRecord(): string {\r\n    return this.execution(\"æ´æ°\");\r\n  }\r\n\r\n  /**\r\n  * å°å·ç¢ºèªã¡ãã»ã¼ã¸\r\n  */\r\n  public printingOut(): string {\r\n    return this.execution(\"å°å·\");\r\n  }\r\n\r\n  /**\r\n  * ç·¨éåå®¹ãå¤±ãããè­¦åã¡ãã»ã¼ã¸\r\n  */\r\n  public editingContentWillBeLost(): string {\r\n    return \"ç·¨éåå®¹ãå¤±ããã¾ãã\\nããããã§ããï¼\";\r\n  }\r\n}\r\n\r\nexport class SHMessageFatal extends SHMessageUtl {\r\n  /**\r\n  * ã·ã¹ãã ã¨ã©ã¼ã¡ãã»ã¼ã¸\r\n  */\r\n  public systemErrorHasOccurred(): string {\r\n    return \"ã·ã¹ãã ã¨ã©ã¼ãçºçãã¾ãããã·ã¹ãã ç®¡çèã«é£çµ¡ãã¦ãã ããã\";\r\n  }\r\n}\r\n\r\nexport class SHMessageInfo extends SHMessageUtl {\r\n  /**\r\n  * åã®ãã¼ã¸ã«æ»ãå ´åã®ç¢ºèªã¡ãã»ã¼ã¸\r\n  */\r\n  public dontUseHistoryBack(btnName: string): string {\r\n    return this.stringFormat(\"åã®ãã¼ã¸ã«æ»ãå ´åã{0}ãã¿ã³ããæ»ã£ã¦ãã ããã\", btnName);\r\n  }\r\n}\r\n\r\nexport class SHMessage {\r\n  constructor() { }\r\n\r\n  /**\r\n  * Confirm\r\n  */\r\n  public confirm = new SHMessageConfirm();\r\n\r\n  /**\r\n  * Fatal\r\n  */\r\n  public fatal = new SHMessageFatal();\r\n\r\n  /**\r\n  * Info\r\n  */\r\n  public info = new SHMessageInfo();\r\n\r\n}","export const ShHttpClientConst = {\r\n    STATUS_OK: 200,\r\n    RELOAD: \"reload\",\r\n    HTTP: \"http\",\r\n    API_URL: \"/api/\",\r\n    VERSION_API_URL: \"/api/Version/\",\r\n    VERSION_NO: \"Version-No\",\r\n    AUTHORIZATION_TOKEN: \"AccessToken\",\r\n    Bearer: 'Bearer ',\r\n    REDIRECT_PATH: 'REDIRECT_PATH',\r\n    SH_QUERY_PARAMS: 'SH_QUERY_PARAMS'\r\n}\r\n\r\nexport const Response = \"response\";\r\n\r\nexport const VersionNo = \"Version-No\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ShHttpClientConst, Response } from '../constShHttpClient';\r\nimport { ShHttpClientService } from './sh-http-client.service';\r\nimport { ApiResponseBody } from '../utilities/ApiResponseBody';\r\nimport { async } from '@angular/core/testing';\r\nimport { ApiResponse } from '../utilities/ApiResponse';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VersionService {\r\n\r\n  //versionã®ã­ã£ãã·ã¥\r\n  private versions: { keyUrl: string, version: string }[] = [];\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  /**\r\n   * versionã®åæå\r\n   */\r\n  public async initVersion(...urls: string[]) {\r\n    if (!urls) return;\r\n    await Promise.all(urls.map(async (url) => {\r\n      const result = await this.fetchVersion(url)\r\n      this.setVersionNo(url, result)\r\n      return\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * urlããã­ã¼ãçæ\r\n   * @param url \r\n   */\r\n  private getKeyUrl(url: string) {\r\n    if (!url) return \"\";\r\n    return url.split(ShHttpClientConst.API_URL)[0] + ShHttpClientConst.VERSION_API_URL;\r\n  }\r\n  /**\r\n   * ããã¯ã¨ã³ãã®versionæå ±ãåå¾\r\n   */\r\n  public async fetchVersion(url: string): Promise<string> {\r\n    const s = this.splitByApiUrl(url);\r\n    const token = sessionStorage.getItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`)\r\n    return this.http.get<ApiResponseBody<any>>(s, { observe: Response, headers: { \"Authorization\": token ? ShHttpClientConst.Bearer + token : ShHttpClientConst.Bearer } }).toPromise()\r\n      .then(response => {\r\n        if (response.body.redirectURL == ShHttpClientConst.RELOAD) {\r\n          setTimeout(function(){location.reload();}, 100);\r\n\r\n        }\r\n        else if ((response.body.redirectURL || \"\").indexOf(ShHttpClientConst.HTTP) != -1) {\r\n          setTimeout(function(){location.href = response.body.redirectURL;}, 100);\r\n        }\r\n        return response.body.applicationData ? response.body.applicationData.versionNo : \"\";\r\n      });\r\n  }\r\n\r\n  /**\r\n   * urlãsplitããå¤ãè¿ã\r\n   */\r\n  private splitByApiUrl(url: string) {\r\n    return url.split(ShHttpClientConst.API_URL)[0] + ShHttpClientConst.VERSION_API_URL || '';\r\n  }\r\n  /**\r\n   * ã­ã£ãã·ã¥ãã¦ããversionãURLããåå¾ãã\r\n   * @param url\r\n   */\r\n  public async getVersion(url: string): Promise<string> {\r\n    const keyUrl = this.getKeyUrl(url)\r\n    const projectVersion = this.versions\r\n      .find(value => {\r\n        return value.keyUrl === keyUrl\r\n      })\r\n    if (!projectVersion) {\r\n      const version = await this.fetchVersion(url)\r\n      // //ã­ã£ãã·ã¥ãã\r\n      this.setVersionNo(url, version)\r\n      return version;\r\n    }\r\n    return projectVersion.version;\r\n\r\n  }\r\n\r\n  /**\r\n   * åãåã£ãversionNoãã­ã£ãã·ã¥ãã\r\n   * @param url apiUrl\r\n   * @param versionNo ããã¯ã¨ã³ãã®version \r\n   */\r\n  public setVersionNo(url: string, versionNo: string) {\r\n    const keyUrl = this.getKeyUrl(url);\r\n    if (!keyUrl || !versionNo) return\r\n    const result = this.versions.findIndex(item => item.keyUrl == keyUrl);\r\n    if(result != -1) {\r\n      this.versions[result] = { keyUrl, version: versionNo };\r\n    }else {\r\n      this.versions.push({ keyUrl, version: versionNo });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Alert } from '../utilities/Alert';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertHandlerService {\r\n\r\n  private Alert: Alert = new Alert();\r\n  private AlertHandlerSubject = new Subject<Alert>();\r\n  public AlertHandlerState = this.AlertHandlerSubject.asObservable();\r\n\r\n  /**\r\n   * ã³ã³ã¹ãã©ã¯ã¿\r\n   */\r\n  constructor() { }\r\n\r\n  /**\r\n  * ã¢ã©ã¼ããè¿½å ãã\r\n  * @param validationType æ¤è¨¼çµæã¿ã¤ã\r\n  * @param validationMessages æ¤è¨¼çµæã¡ãã»ã¼ã¸éå\r\n  */\r\n  public setAlert(alertInfo: Alert) {\r\n    this.Alert = alertInfo;\r\n    this.AlertHandlerSubject.next(this.Alert);\r\n\r\n  }\r\n\r\n  /**\r\n   * ã¢ã©ã¼ããã¯ãªã¢ãã\r\n   */\r\n  public alertClear() {\r\n    this.Alert.message = \"\";\r\n    this.Alert.type = \"\";\r\n    this.AlertHandlerSubject.next(this.Alert);\r\n\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nclass ValidationError {\r\n  show: boolean\r\n  meesages: any\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidationErrorService {\r\n  private validationError = new ValidationError();\r\n  private validationErrorSubject = new Subject<ValidationError>();\r\n  public validationErrorState = this.validationErrorSubject.asObservable()\r\n  constructor() { }\r\n\r\n  public setValidationError(validationErrors: any) {\r\n    this.validationError.show = true;\r\n    this.validationError.meesages = validationErrors;\r\n    this.validationErrorSubject.next(this.validationError)\r\n  }\r\n\r\n  public clearValidationError() {\r\n    this.validationError.show = false;\r\n    this.validationError.meesages = null;\r\n    this.validationErrorSubject.next(this.validationError);\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ShHttpClientConst } from '../constShHttpClient';\r\n\r\nexport type UseHash = {useHash: boolean}\r\n\r\nexport const SH_BROWSER_STORAGE = new InjectionToken<Storage>(`Browser Storage`, {\r\n    providedIn: `root`,\r\n    factory: () => localStorage \r\n});\r\n\r\nexport const USE_HASH = new InjectionToken<UseHash>('UseHash', {\r\n    providedIn: `root`,\r\n    factory: () => ({useHash: true})\r\n});\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ShRedirectService {\r\n    constructor(\r\n        private router: Router,\r\n        @Inject(SH_BROWSER_STORAGE) private storage: Storage,\r\n        @Inject(USE_HASH) private isHash: UseHash\r\n    ){}\r\n\r\n    get redirectPath(): string {\r\n        return this.storage.getItem(ShHttpClientConst.REDIRECT_PATH);\r\n    }\r\n    get queryParams(): URLSearchParams | null {\r\n        const query = new URLSearchParams(this.storage.getItem(ShHttpClientConst.SH_QUERY_PARAMS)) || null;\r\n        return query;\r\n    }\r\n    public setRedirectPath() {\r\n        let path = '';\r\n        let query = '';\r\n        if(this.isHash.useHash) {\r\n            const pathparams = location.href.split('#')[1].split('?');\r\n            path = pathparams[0];\r\n            query = pathparams[1] || '';\r\n        } else {\r\n            path = location.pathname;\r\n            path = location.search;\r\n        }\r\n        this.storage.setItem(ShHttpClientConst.REDIRECT_PATH, path);\r\n        this.storage.setItem(ShHttpClientConst.SH_QUERY_PARAMS, query);\r\n    }\r\n\r\n    public redirect() {\r\n        this.router.navigate([this.storage.getItem(ShHttpClientConst.REDIRECT_PATH)]);\r\n        this.storage.setItem(ShHttpClientConst.REDIRECT_PATH, '');\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs'\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\nimport { catchError, map } from 'rxjs/operators'\r\nimport { ApiResponse } from '../utilities/ApiResponse';\r\nimport { VersionService } from './version.service';\r\nimport { AlertHandlerService } from './alert-handler.service';\r\nimport { ValidationErrorService } from './validation-error.service';\r\nimport { ApiResponseBody } from '../utilities/ApiResponseBody';\r\nimport { ShHttpClientConst, Response } from '../constShHttpClient';\r\nimport { SHMessage } from '../utilities/ShMessage';\r\nimport { ShRedirectService } from './sh-redirect.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShHttpClientService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private versionService: VersionService,\r\n    private alertHandlerService: AlertHandlerService,\r\n    private validationErrorService: ValidationErrorService,\r\n    private redirectService: ShRedirectService\r\n  ) { }\r\n\r\n  /**\r\n   * AccessTokenã®æç¡ãè¿ã\r\n   */\r\n  get hasToken(): boolean {\r\n    return !!sessionStorage.getItem('AccessToken');\r\n  }\r\n  /**\r\n   * httpOptionãè¿ã\r\n   * @param versionNo \r\n   */\r\n  private getOption(versionNo: string): object {\r\n    const token = sessionStorage.getItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`)\r\n    let headers = new HttpHeaders({ \"Version-No\": versionNo })\r\n    headers = headers.set('Content-Type', 'application/json; charset=utf-8');\r\n    const accessToken = token ? ShHttpClientConst.Bearer + token : ShHttpClientConst.Bearer;\r\n    headers = headers.set('Authorization', accessToken);\r\n    return { observe: Response, headers };\r\n  }\r\n  /**\r\n  * GET\r\n  * @param apiResponseBody ã¬ã¹ãã³ã¹Bodyæå ±\r\n  * @return ã¬ã¹ãã³ã¹Bodyåã®bodyå¥\r\n  */\r\n  private getApiResponseBody<T>(apiResponseBody: ApiResponse<T>, showValidationResult: boolean): ApiResponseBody<T> {\r\n    if (apiResponseBody.status != ShHttpClientConst.STATUS_OK)\r\n      return new ApiResponseBody<T>();\r\n    if (apiResponseBody.body) {\r\n      if (apiResponseBody.body.message) {\r\n        alert(apiResponseBody.body.message);\r\n      }\r\n      if (apiResponseBody.body.message) {\r\n        alert(apiResponseBody.body.message);\r\n      }\r\n      if (apiResponseBody.body.redirectURL == ShHttpClientConst.RELOAD) {\r\n        setTimeout(function(){location.reload();}, 100);\r\n      }\r\n      else if ((apiResponseBody.body.redirectURL || \"\").indexOf(ShHttpClientConst.HTTP) != -1) {\r\n        // useHashãtrueã«ãªã£ã¦ãããã¨ãåææ¡ä»¶ã§ã\r\n        this.redirectService.setRedirectPath();\r\n        setTimeout(function(){location.href = apiResponseBody.body.redirectURL}, 100);\r\n      }\r\n      if(showValidationResult) {\r\n        //ããªãã¼ã·ã§ã³å¦ç\r\n        if (apiResponseBody.body.hasValidationErrors) {\r\n          this.validationErrorService.setValidationError(apiResponseBody.body.validationErrors);\r\n        } else {\r\n          this.validationErrorService.clearValidationError();\r\n        }\r\n      }\r\n      \r\n      if (apiResponseBody.body.alert) {\r\n        //ã¢ã©ã¼ãå¦ç\r\n        this.alertHandlerService.setAlert(apiResponseBody.body.alert);\r\n      }\r\n    }\r\n\r\n    return apiResponseBody.body;\r\n  }\r\n  /**\r\n   * èªè¨¼æ¸ã¿ãã©ãã\r\n   */\r\n  private isAuthenticate(): boolean {\r\n    return !!sessionStorage.getItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`)\r\n  }\r\n  /**\r\n  * GET\r\n  * @param url ApiUrl\r\n  * @return APIè¿å´çµæ\r\n  */\r\n  public async get<T>(url: string, showValidationResult: boolean = true): Promise<ApiResponseBody<T>> {\r\n    let versionNo = \"\"\r\n    if (this.isAuthenticate()) {\r\n      versionNo = await this.versionService.getVersion(url);\r\n    }\r\n    const option: object = this.getOption(versionNo);\r\n    return this.http.get<ApiResponse<T>>(this.encodeUrl(url), option).pipe(\r\n      map(response => {\r\n        return this.getApiResponseBody<T>(response, showValidationResult);\r\n      }),\r\n      catchError(this.handleError<any>(\"get error\"))\r\n    ).toPromise();\r\n  }\r\n\r\n  /**\r\n  * POST\r\n  * @param url ApiUrl\r\n  * @param data ãã¼ã¿\r\n  * @return APIè¿å´çµæ\r\n  */\r\n  public async post<T>(url: string, data: any, showValidationResult: boolean = true): Promise<ApiResponseBody<T>> {\r\n    const versionNo = await this.versionService.getVersion(url);\r\n    const option: object = this.getOption(versionNo)\r\n    return this.http.post<ApiResponse<T>>(url, data, option).pipe(\r\n      map(response => {\r\n        return this.getApiResponseBody(response, showValidationResult);\r\n      }),\r\n      catchError(this.handleError<any>(\"post error\"))\r\n    ).toPromise();\r\n\r\n  }\r\n\r\n  /**\r\n  * PUT\r\n  * @param url ApiUrl\r\n  * @param data ãã¼ã¿\r\n  * @return APIè¿å´çµæ\r\n  */\r\n  public async put<T>(url: string, data: any, showValidationResult: boolean = true): Promise<ApiResponseBody<T>> {\r\n    const versionNo = await this.versionService.getVersion(url);\r\n    const option: object = this.getOption(versionNo)\r\n    return this.http.put<ApiResponse<T>>(url, data, option).pipe(\r\n      map(response => {\r\n        return this.getApiResponseBody(response, showValidationResult);\r\n      }),\r\n      catchError(this.handleError<any>(\"put error\"))\r\n    ).toPromise();\r\n\r\n  }\r\n\r\n  /**\r\n  * DELETE\r\n  * @param url ApiUrl\r\n  * @return APIè¿å´çµæ\r\n  */\r\n  public async delete<T>(url: string, showValidationResult: boolean = true): Promise<ApiResponseBody<T>> {\r\n    const versionNo = await this.versionService.getVersion(url);\r\n    const option: object = this.getOption(versionNo)\r\n    return this.http.delete<ApiResponse<T>>(url, option).pipe(\r\n      map(response => {\r\n        return this.getApiResponseBody(response, showValidationResult);\r\n      }),\r\n      catchError(this.handleError<any>(\"delete error\")),\r\n    ).toPromise();\r\n\r\n  }\r\n\r\n  /**\r\n   * ã¨ã©ã¼ãã³ãã©\r\n   * @param operation ã©ã®å¦çã§ã¨ã©ã¼ãèµ·ããã\r\n   * @param result ç©ºã®éåãæå®ç¡ããè¿ãã¦å¦çãç¶ç¶ããã\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      const msg: SHMessage = new SHMessage();\r\n      alert(msg.fatal.systemErrorHasOccurred());\r\n      throw error;\r\n    };\r\n\r\n  }\r\n  /**\r\n   * urlãã¨ã³ã³ã¼ããããã¤ã³ã¿ã¼ã¹ãã¼ã¸ç¨ã®å¯¾å¿\r\n   * @param url \r\n   */\r\n  private encodeUrl(url: string): string {\r\n    if (!url) return;\r\n    if (url.indexOf('?')) {\r\n      return encodeURI(url);\r\n    }\r\n    return url;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { ShHttpClientConst } from '../constShHttpClient';\r\nimport { ShHttpClientService } from './sh-http-client.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private token: string;\r\n  constructor(private http: ShHttpClientService){}\r\n  /**\r\n   * èªè¨¼æ¸ã¿ãã®å¤å®\r\n   */\r\n  isAuthenticated(): Observable<boolean> {\r\n    this.token = sessionStorage.getItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`);\r\n    if (this.token) {\r\n      return of(true);\r\n    } else {\r\n      return of(false);\r\n    }\r\n\r\n  }\r\n  /**\r\n   * èªè¨¼\r\n   * @param jigCode \r\n   * @param tanCode \r\n   * @param password \r\n   */\r\n  login(jigCode: string, tanCode: string, password: string): Observable<boolean> {\r\n    //å®éã¯ãã¼ã¿ãã¼ã¹ãªããã¦ã¼ã¶ã¼ç®¡çãããµã¼ãã¹ãªãã«åãåããã¦æ»ãå¤ãè¿ã\r\n    //ãµã¼ãã¼ã¨ã®éä¿¡ã®çµæãlacalStorageã¸ä¿å­ï¼ä»ã¯ä»®å®è£ï¼\r\n    sessionStorage.setItem(ShHttpClientConst.AUTHORIZATION_TOKEN, jigCode + tanCode + password);\r\n    //éä¿¡ã®çµæã§åå²ãã\r\n    if (true) {\r\n      return of(true);\r\n    }\r\n    else {\r\n      /**èªè¨¼å¤±ææ */\r\n      return of(false);\r\n    }\r\n  }\r\n  /**\r\n   * ã­ã°ã¢ã¦ã\r\n   * ãªãã¤ã¬ã¯ãã¯ã¬ã¼ãã§è¡ã\r\n   */\r\n  public logout(url: string) {\r\n    return this.http.get(url).then(_ => {\r\n      sessionStorage.removeItem(ShHttpClientConst.AUTHORIZATION_TOKEN);\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationService {\r\n\r\n  //ã¦ã¼ã¶ã¼ã®ãã©ã¦ã¶ããã¯å®è¡ç¶æ\r\n  private isBackClicked: boolean = false;\r\n\r\n  /**\r\n   * ã³ã³ã¹ãã©ã¯ã¿\r\n   */\r\n  constructor() { }\r\n\r\n  /**\r\n   * ã¦ã¼ã¶ã¼ã®ãã©ã¦ã¶ããã¯å®è¡ãä¿å­ãã\r\n   * @return true/false\r\n   */\r\n  public getBackClicked() {\r\n    return this.isBackClicked;\r\n\r\n  }\r\n\r\n  /**\r\n   * ã¦ã¼ã¶ã¼ã®ãã©ã¦ã¶ããã¯å®è¡ãä¿å­ãã\r\n   * @param isBackClicked\r\n   */\r\n  public setBackClicked(isBackClicked) {\r\n    this.isBackClicked = isBackClicked;\r\n\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ShHttpClientService } from './sh-http-client.service';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\n\r\ntype logParam = {\r\n  path: string\r\n  action?: string\r\n}\r\ntype config = {\r\n  url :string\r\n  useHash: boolean\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggerService {\r\n  private isBackButton = false;\r\n  private config: config = {url: '', useHash: true};\r\n  constructor(\r\n    private http: ShHttpClientService,\r\n    private router: Router,\r\n  ) { }\r\n  /**\r\n   * logApiã¸ãªã¯ã¨ã¹ã\r\n   * \r\n   */\r\n  private async push(param: logParam) {\r\n    return this.http.post(this.config.url, param);\r\n  }\r\n  /**\r\n   * è¨­å®ãæ´æ°\r\n   */\r\n  public configure(config : Partial<config>) {\r\n    const { url, useHash } = config;\r\n    if(url) {\r\n      this.config.url = url;\r\n    }\r\n    if(useHash !== undefined && useHash !== null) {\r\n      this.config.useHash = useHash;\r\n    }\r\n    return this;\r\n  }\r\n  /**\r\n   * ç»é¢é·ç§»ãçºçãããã³ã«logging\r\n   */\r\n  public trackingPath() {\r\n    this.router.events.subscribe(async (event) => {\r\n      if(event instanceof NavigationEnd){\r\n        if(this.isBackButton){\r\n          this.isBackButton = false;\r\n          return;\r\n        }\r\n        const path = this.config.useHash \r\n          ? `#${event.urlAfterRedirects}`\r\n          : event.urlAfterRedirects.replace('/', '');\r\n        const result = await this.push({path});\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * actionlog pathã¯å¿é ã®ããå¿ãéããã\r\n   */\r\n  public async action(action: string) {\r\n    const path = this.config.useHash\r\n      ? `#${this.router.url}`\r\n      :  this.router.url.replace('/', '');\r\n    await this.push({path, action});\r\n  }\r\n  /**\r\n   * \r\n   */\r\n  public stopLoggingPath() {\r\n    this.isBackButton = true;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators'\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.authService.isAuthenticated().pipe(\r\n      tap((result)=> {\r\n        if(!result){\r\n          alert(\"èªè¨¼ã«å¤±æãã¾ãããã¡ã¼ã«ã¢ãã¬ã¹ã¨ãã¹ã¯ã¼ããååº¦ç¢ºèªãã¦ãã ããã\");\r\n          return\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanDeactivate } from '@angular/router';\r\nimport { NavigationService } from '../services/navigation.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationGuard implements CanDeactivate<any>{\r\n  /**\r\n  * ã³ã³ã¹ãã©ã¯ã¿\r\n  */\r\n  constructor(private navigationService: NavigationService) { }\r\n\r\n  /**\r\n  * ç»é¢é·ç§»åå¦ç\r\n  * @return true/false\r\n  */\r\n  public canDeactivate(component: any) {\r\n    if (this.navigationService.getBackClicked()) {\r\n      this.navigationService.setBackClicked(false);\r\n      history.pushState(null, null, location.href);\r\n      return false;\r\n    }\r\n    return true;\r\n\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ShRedirectService, SH_BROWSER_STORAGE } from './services/sh-redirect.service';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule,\r\n  ],\r\n  exports: [],\r\n  providers: [\r\n  ]\r\n})\r\nexport class ShHttpClient { }\r\n"],"names":[],"mappings":"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"}