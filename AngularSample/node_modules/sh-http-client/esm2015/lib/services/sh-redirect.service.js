/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, InjectionToken, Inject } from '@angular/core';
import { Router } from '@angular/router';
import { ShHttpClientConst } from '../constShHttpClient';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/** @type {?} */
export const SH_BROWSER_STORAGE = new InjectionToken(`Browser Storage`, {
    providedIn: `root`,
    factory: (/**
     * @return {?}
     */
    () => localStorage)
});
/** @type {?} */
export const USE_HASH = new InjectionToken('UseHash', {
    providedIn: `root`,
    factory: (/**
     * @return {?}
     */
    () => ({ useHash: true }))
});
export class ShRedirectService {
    /**
     * @param {?} router
     * @param {?} storage
     * @param {?} isHash
     */
    constructor(router, storage, isHash) {
        this.router = router;
        this.storage = storage;
        this.isHash = isHash;
    }
    /**
     * @return {?}
     */
    get redirectPath() {
        return this.storage.getItem(ShHttpClientConst.REDIRECT_PATH);
    }
    /**
     * @return {?}
     */
    get queryParams() {
        /** @type {?} */
        const query = new URLSearchParams(this.storage.getItem(ShHttpClientConst.SH_QUERY_PARAMS)) || null;
        return query;
    }
    /**
     * @return {?}
     */
    setRedirectPath() {
        /** @type {?} */
        let path = '';
        /** @type {?} */
        let query = '';
        if (this.isHash.useHash) {
            /** @type {?} */
            const pathparams = location.href.split('#')[1].split('?');
            path = pathparams[0];
            query = pathparams[1] || '';
        }
        else {
            path = location.pathname;
            path = location.search;
        }
        this.storage.setItem(ShHttpClientConst.REDIRECT_PATH, path);
        this.storage.setItem(ShHttpClientConst.SH_QUERY_PARAMS, query);
    }
    /**
     * @return {?}
     */
    redirect() {
        this.router.navigate([this.storage.getItem(ShHttpClientConst.REDIRECT_PATH)]);
        this.storage.setItem(ShHttpClientConst.REDIRECT_PATH, '');
    }
}
ShRedirectService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShRedirectService.ctorParameters = () => [
    { type: Router },
    { type: Storage, decorators: [{ type: Inject, args: [SH_BROWSER_STORAGE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [USE_HASH,] }] }
];
/** @nocollapse */ ShRedirectService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ShRedirectService_Factory() { return new ShRedirectService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(SH_BROWSER_STORAGE), i0.ɵɵinject(USE_HASH)); }, token: ShRedirectService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShRedirectService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ShRedirectService.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    ShRedirectService.prototype.isHash;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtcmVkaXJlY3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWh0dHAtY2xpZW50LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NoLXJlZGlyZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFJekQsTUFBTSxPQUFPLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFVLGlCQUFpQixFQUFFO0lBQzdFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU87OztJQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQTtDQUM5QixDQUFDOztBQUVGLE1BQU0sT0FBTyxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQVUsU0FBUyxFQUFFO0lBQzNELFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU87OztJQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQTtDQUNuQyxDQUFDO0FBS0YsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7O0lBQzFCLFlBQ1ksTUFBYyxFQUNjLE9BQWdCLEVBQzFCLE1BQWU7UUFGakMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNjLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDMUIsV0FBTSxHQUFOLE1BQU0sQ0FBUztJQUMzQyxDQUFDOzs7O0lBRUgsSUFBSSxZQUFZO1FBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7O0lBQ0QsSUFBSSxXQUFXOztjQUNMLEtBQUssR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLElBQUk7UUFDbEcsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7OztJQUNNLGVBQWU7O1lBQ2QsSUFBSSxHQUFHLEVBQUU7O1lBQ1QsS0FBSyxHQUFHLEVBQUU7UUFDZCxJQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFOztrQkFDZCxVQUFVLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUN6RCxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQy9CO2FBQU07WUFDSCxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztZQUN6QixJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7OztJQUVNLFFBQVE7UUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7O1lBbkNKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQWpCUSxNQUFNO1lBcUJzQyxPQUFPLHVCQUFuRCxNQUFNLFNBQUMsa0JBQWtCOzRDQUN6QixNQUFNLFNBQUMsUUFBUTs7Ozs7Ozs7SUFGaEIsbUNBQXNCOzs7OztJQUN0QixvQ0FBb0Q7Ozs7O0lBQ3BELG1DQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgU2hIdHRwQ2xpZW50Q29uc3QgfSBmcm9tICcuLi9jb25zdFNoSHR0cENsaWVudCc7XHJcblxyXG5leHBvcnQgdHlwZSBVc2VIYXNoID0ge3VzZUhhc2g6IGJvb2xlYW59XHJcblxyXG5leHBvcnQgY29uc3QgU0hfQlJPV1NFUl9TVE9SQUdFID0gbmV3IEluamVjdGlvblRva2VuPFN0b3JhZ2U+KGBCcm93c2VyIFN0b3JhZ2VgLCB7XHJcbiAgICBwcm92aWRlZEluOiBgcm9vdGAsXHJcbiAgICBmYWN0b3J5OiAoKSA9PiBsb2NhbFN0b3JhZ2UgXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVTRV9IQVNIID0gbmV3IEluamVjdGlvblRva2VuPFVzZUhhc2g+KCdVc2VIYXNoJywge1xyXG4gICAgcHJvdmlkZWRJbjogYHJvb3RgLFxyXG4gICAgZmFjdG9yeTogKCkgPT4gKHt1c2VIYXNoOiB0cnVlfSlcclxufSk7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNoUmVkaXJlY3RTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICAgICAgQEluamVjdChTSF9CUk9XU0VSX1NUT1JBR0UpIHByaXZhdGUgc3RvcmFnZTogU3RvcmFnZSxcclxuICAgICAgICBASW5qZWN0KFVTRV9IQVNIKSBwcml2YXRlIGlzSGFzaDogVXNlSGFzaFxyXG4gICAgKXt9XHJcblxyXG4gICAgZ2V0IHJlZGlyZWN0UGF0aCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShTaEh0dHBDbGllbnRDb25zdC5SRURJUkVDVF9QQVRIKTtcclxuICAgIH1cclxuICAgIGdldCBxdWVyeVBhcmFtcygpOiBVUkxTZWFyY2hQYXJhbXMgfCBudWxsIHtcclxuICAgICAgICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXModGhpcy5zdG9yYWdlLmdldEl0ZW0oU2hIdHRwQ2xpZW50Q29uc3QuU0hfUVVFUllfUEFSQU1TKSkgfHwgbnVsbDtcclxuICAgICAgICByZXR1cm4gcXVlcnk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0UmVkaXJlY3RQYXRoKCkge1xyXG4gICAgICAgIGxldCBwYXRoID0gJyc7XHJcbiAgICAgICAgbGV0IHF1ZXJ5ID0gJyc7XHJcbiAgICAgICAgaWYodGhpcy5pc0hhc2gudXNlSGFzaCkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRocGFyYW1zID0gbG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzFdLnNwbGl0KCc/Jyk7XHJcbiAgICAgICAgICAgIHBhdGggPSBwYXRocGFyYW1zWzBdO1xyXG4gICAgICAgICAgICBxdWVyeSA9IHBhdGhwYXJhbXNbMV0gfHwgJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGF0aCA9IGxvY2F0aW9uLnBhdGhuYW1lO1xyXG4gICAgICAgICAgICBwYXRoID0gbG9jYXRpb24uc2VhcmNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShTaEh0dHBDbGllbnRDb25zdC5SRURJUkVDVF9QQVRILCBwYXRoKTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShTaEh0dHBDbGllbnRDb25zdC5TSF9RVUVSWV9QQVJBTVMsIHF1ZXJ5KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVkaXJlY3QoKSB7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW3RoaXMuc3RvcmFnZS5nZXRJdGVtKFNoSHR0cENsaWVudENvbnN0LlJFRElSRUNUX1BBVEgpXSk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oU2hIdHRwQ2xpZW50Q29uc3QuUkVESVJFQ1RfUEFUSCwgJycpO1xyXG4gICAgfVxyXG59Il19