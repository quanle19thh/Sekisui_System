/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { catchError, map } from 'rxjs/operators';
import { VersionService } from './version.service';
import { AlertHandlerService } from './alert-handler.service';
import { ValidationErrorService } from './validation-error.service';
import { ApiResponseBody } from '../utilities/ApiResponseBody';
import { ShHttpClientConst, Response } from '../constShHttpClient';
import { SHMessage } from '../utilities/ShMessage';
import { ShRedirectService } from './sh-redirect.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./version.service";
import * as i3 from "./alert-handler.service";
import * as i4 from "./validation-error.service";
import * as i5 from "./sh-redirect.service";
export class ShHttpClientService {
    /**
     * @param {?} http
     * @param {?} versionService
     * @param {?} alertHandlerService
     * @param {?} validationErrorService
     * @param {?} redirectService
     */
    constructor(http, versionService, alertHandlerService, validationErrorService, redirectService) {
        this.http = http;
        this.versionService = versionService;
        this.alertHandlerService = alertHandlerService;
        this.validationErrorService = validationErrorService;
        this.redirectService = redirectService;
    }
    /**
     * AccessTokenの有無を返す
     * @return {?}
     */
    get hasToken() {
        return !!sessionStorage.getItem('AccessToken');
    }
    /**
     * httpOptionを返す
     * @private
     * @param {?} versionNo
     * @return {?}
     */
    getOption(versionNo) {
        /** @type {?} */
        const token = sessionStorage.getItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`);
        /** @type {?} */
        let headers = new HttpHeaders({ "Version-No": versionNo });
        headers = headers.set('Content-Type', 'application/json; charset=utf-8');
        /** @type {?} */
        const accessToken = token ? ShHttpClientConst.Bearer + token : ShHttpClientConst.Bearer;
        headers = headers.set('Authorization', accessToken);
        return { observe: Response, headers };
    }
    /**
     * GET
     * @private
     * @template T
     * @param {?} apiResponseBody レスポンスBody情報
     * @param {?} showValidationResult
     * @return {?} レスポンスBody内のbody句
     */
    getApiResponseBody(apiResponseBody, showValidationResult) {
        if (apiResponseBody.status != ShHttpClientConst.STATUS_OK)
            return new ApiResponseBody();
        if (apiResponseBody.body) {
            if (apiResponseBody.body.message) {
                alert(apiResponseBody.body.message);
            }
            if (apiResponseBody.body.message) {
                alert(apiResponseBody.body.message);
            }
            if (apiResponseBody.body.redirectURL == ShHttpClientConst.RELOAD) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { location.reload(); }), 100);
            }
            else if ((apiResponseBody.body.redirectURL || "").indexOf(ShHttpClientConst.HTTP) != -1) {
                // useHashがtrueになっていることが前提条件です
                this.redirectService.setRedirectPath();
                setTimeout((/**
                 * @return {?}
                 */
                function () { location.href = apiResponseBody.body.redirectURL; }), 100);
            }
            if (showValidationResult) {
                //バリデーション処理
                if (apiResponseBody.body.hasValidationErrors) {
                    this.validationErrorService.setValidationError(apiResponseBody.body.validationErrors);
                }
                else {
                    this.validationErrorService.clearValidationError();
                }
            }
            if (apiResponseBody.body.alert) {
                //アラート処理
                this.alertHandlerService.setAlert(apiResponseBody.body.alert);
            }
        }
        return apiResponseBody.body;
    }
    /**
     * 認証済みかどうか
     * @private
     * @return {?}
     */
    isAuthenticate() {
        return !!sessionStorage.getItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`);
    }
    /**
     * GET
     * @template T
     * @param {?} url ApiUrl
     * @param {?=} showValidationResult
     * @return {?} API返却結果
     */
    get(url, showValidationResult = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let versionNo = "";
            if (this.isAuthenticate()) {
                versionNo = yield this.versionService.getVersion(url);
            }
            /** @type {?} */
            const option = this.getOption(versionNo);
            return this.http.get(this.encodeUrl(url), option).pipe(map((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                return this.getApiResponseBody(response, showValidationResult);
            })), catchError(this.handleError("get error"))).toPromise();
        });
    }
    /**
     * POST
     * @template T
     * @param {?} url ApiUrl
     * @param {?} data データ
     * @param {?=} showValidationResult
     * @return {?} API返却結果
     */
    post(url, data, showValidationResult = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const versionNo = yield this.versionService.getVersion(url);
            /** @type {?} */
            const option = this.getOption(versionNo);
            return this.http.post(url, data, option).pipe(map((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                return this.getApiResponseBody(response, showValidationResult);
            })), catchError(this.handleError("post error"))).toPromise();
        });
    }
    /**
     * PUT
     * @template T
     * @param {?} url ApiUrl
     * @param {?} data データ
     * @param {?=} showValidationResult
     * @return {?} API返却結果
     */
    put(url, data, showValidationResult = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const versionNo = yield this.versionService.getVersion(url);
            /** @type {?} */
            const option = this.getOption(versionNo);
            return this.http.put(url, data, option).pipe(map((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                return this.getApiResponseBody(response, showValidationResult);
            })), catchError(this.handleError("put error"))).toPromise();
        });
    }
    /**
     * DELETE
     * @template T
     * @param {?} url ApiUrl
     * @param {?=} showValidationResult
     * @return {?} API返却結果
     */
    delete(url, showValidationResult = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const versionNo = yield this.versionService.getVersion(url);
            /** @type {?} */
            const option = this.getOption(versionNo);
            return this.http.delete(url, option).pipe(map((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                return this.getApiResponseBody(response, showValidationResult);
            })), catchError(this.handleError("delete error"))).toPromise();
        });
    }
    /**
     * エラーハンドラ
     * @private
     * @template T
     * @param {?=} operation どの処理でエラーが起きたか
     * @param {?=} result 空の配列か指定無しを返して処理を継続させる
     * @return {?}
     */
    handleError(operation = 'operation', result) {
        return (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            /** @type {?} */
            const msg = new SHMessage();
            alert(msg.fatal.systemErrorHasOccurred());
            throw error;
        });
    }
    /**
     * urlをエンコードする。インターステージ用の対応
     * @private
     * @param {?} url
     * @return {?}
     */
    encodeUrl(url) {
        if (!url)
            return;
        if (url.indexOf('?')) {
            return encodeURI(url);
        }
        return url;
    }
}
ShHttpClientService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShHttpClientService.ctorParameters = () => [
    { type: HttpClient },
    { type: VersionService },
    { type: AlertHandlerService },
    { type: ValidationErrorService },
    { type: ShRedirectService }
];
/** @nocollapse */ ShHttpClientService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ShHttpClientService_Factory() { return new ShHttpClientService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.VersionService), i0.ɵɵinject(i3.AlertHandlerService), i0.ɵɵinject(i4.ValidationErrorService), i0.ɵɵinject(i5.ShRedirectService)); }, token: ShHttpClientService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShHttpClientService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ShHttpClientService.prototype.versionService;
    /**
     * @type {?}
     * @private
     */
    ShHttpClientService.prototype.alertHandlerService;
    /**
     * @type {?}
     * @private
     */
    ShHttpClientService.prototype.validationErrorService;
    /**
     * @type {?}
     * @private
     */
    ShHttpClientService.prototype.redirectService;
}
//# sourceMappingURL=data:application/json;base64,