/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { ShHttpClientConst } from '../constShHttpClient';
import { ShHttpClientService } from './sh-http-client.service';
import * as i0 from "@angular/core";
import * as i1 from "./sh-http-client.service";
export class AuthService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * 認証済みかの判定
     * @return {?}
     */
    isAuthenticated() {
        this.token = sessionStorage.getItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`);
        if (this.token) {
            return of(true);
        }
        else {
            return of(false);
        }
    }
    /**
     * 認証
     * @param {?} jigCode
     * @param {?} tanCode
     * @param {?} password
     * @return {?}
     */
    login(jigCode, tanCode, password) {
        //実際はデータベースなり、ユーザー管理するサービスなりに問い合わせて戻り値を返す
        //サーバーとの通信の結果をlacalStorageへ保存（今は仮実装）
        sessionStorage.setItem(ShHttpClientConst.AUTHORIZATION_TOKEN, jigCode + tanCode + password);
        //通信の結果で分岐する
        if (true) {
            return of(true);
        }
        else {
            /**認証失敗時 */
            return of(false);
        }
    }
    /**
     * ログアウト
     * リダイレクトはガードで行う
     * @param {?} url
     * @return {?}
     */
    logout(url) {
        return this.http.get(url).then((/**
         * @param {?} _
         * @return {?}
         */
        _ => {
            sessionStorage.removeItem(ShHttpClientConst.AUTHORIZATION_TOKEN);
        }));
    }
}
AuthService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AuthService.ctorParameters = () => [
    { type: ShHttpClientService }
];
/** @nocollapse */ AuthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.ɵɵinject(i1.ShHttpClientService)); }, token: AuthService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.token;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtaHR0cC1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxFQUFFLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQUsvRCxNQUFNLE9BQU8sV0FBVzs7OztJQUV0QixZQUFvQixJQUF5QjtRQUF6QixTQUFJLEdBQUosSUFBSSxDQUFxQjtJQUFFLENBQUM7Ozs7O0lBSWhELGVBQWU7UUFDYixJQUFJLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7UUFDaEYsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xCO0lBRUgsQ0FBQzs7Ozs7Ozs7SUFPRCxLQUFLLENBQUMsT0FBZSxFQUFFLE9BQWUsRUFBRSxRQUFnQjtRQUN0RCx5Q0FBeUM7UUFDekMsb0NBQW9DO1FBQ3BDLGNBQWMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxHQUFHLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQztRQUM1RixZQUFZO1FBQ1osSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQjthQUNJO1lBQ0gsV0FBVztZQUNYLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQzs7Ozs7OztJQUtNLE1BQU0sQ0FBQyxHQUFXO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSTs7OztRQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2pDLGNBQWMsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNuRSxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQTdDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFKUSxtQkFBbUI7Ozs7Ozs7O0lBTTFCLDRCQUFzQjs7Ozs7SUFDViwyQkFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNoSHR0cENsaWVudENvbnN0IH0gZnJvbSAnLi4vY29uc3RTaEh0dHBDbGllbnQnO1xyXG5pbXBvcnQgeyBTaEh0dHBDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi9zaC1odHRwLWNsaWVudC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEF1dGhTZXJ2aWNlIHtcclxuICBwcml2YXRlIHRva2VuOiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBTaEh0dHBDbGllbnRTZXJ2aWNlKXt9XHJcbiAgLyoqXHJcbiAgICog6KqN6Ki85riI44G/44GL44Gu5Yik5a6aXHJcbiAgICovXHJcbiAgaXNBdXRoZW50aWNhdGVkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgdGhpcy50b2tlbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oYCR7U2hIdHRwQ2xpZW50Q29uc3QuQVVUSE9SSVpBVElPTl9UT0tFTn1gKTtcclxuICAgIGlmICh0aGlzLnRva2VuKSB7XHJcbiAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICAvKipcclxuICAgKiDoqo3oqLxcclxuICAgKiBAcGFyYW0gamlnQ29kZSBcclxuICAgKiBAcGFyYW0gdGFuQ29kZSBcclxuICAgKiBAcGFyYW0gcGFzc3dvcmQgXHJcbiAgICovXHJcbiAgbG9naW4oamlnQ29kZTogc3RyaW5nLCB0YW5Db2RlOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIC8v5a6f6Zqb44Gv44OH44O844K/44OZ44O844K544Gq44KK44CB44Om44O844K244O8566h55CG44GZ44KL44K144O844OT44K544Gq44KK44Gr5ZWP44GE5ZCI44KP44Gb44Gm5oi744KK5YCk44KS6L+U44GZXHJcbiAgICAvL+OCteODvOODkOODvOOBqOOBrumAmuS/oeOBrue1kOaenOOCkmxhY2FsU3RvcmFnZeOBuOS/neWtmO+8iOS7iuOBr+S7ruWun+ijhe+8iVxyXG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShTaEh0dHBDbGllbnRDb25zdC5BVVRIT1JJWkFUSU9OX1RPS0VOLCBqaWdDb2RlICsgdGFuQ29kZSArIHBhc3N3b3JkKTtcclxuICAgIC8v6YCa5L+h44Gu57WQ5p6c44Gn5YiG5bKQ44GZ44KLXHJcbiAgICBpZiAodHJ1ZSkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLyoq6KqN6Ki85aSx5pWX5pmCICovXHJcbiAgICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOODreOCsOOCouOCpuODiFxyXG4gICAqIOODquODgOOCpOODrOOCr+ODiOOBr+OCrOODvOODieOBp+ihjOOBhlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2dvdXQodXJsOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCkudGhlbihfID0+IHtcclxuICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShTaEh0dHBDbGllbnRDb25zdC5BVVRIT1JJWkFUSU9OX1RPS0VOKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=