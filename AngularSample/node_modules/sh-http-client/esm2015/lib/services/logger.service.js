/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ShHttpClientService } from './sh-http-client.service';
import { Router, NavigationEnd } from '@angular/router';
import * as i0 from "@angular/core";
import * as i1 from "./sh-http-client.service";
import * as i2 from "@angular/router";
export class LoggerService {
    /**
     * @param {?} http
     * @param {?} router
     */
    constructor(http, router) {
        this.http = http;
        this.router = router;
        this.isBackButton = false;
        this.config = { url: '', useHash: true };
    }
    /**
     * logApiへリクエスト
     *
     * @private
     * @param {?} param
     * @return {?}
     */
    push(param) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.http.post(this.config.url, param);
        });
    }
    /**
     * 設定を更新
     * @template THIS
     * @this {THIS}
     * @param {?} config
     * @return {THIS}
     */
    configure(config) {
        const { url, useHash } = config;
        if (url) {
            (/** @type {?} */ (this)).config.url = url;
        }
        if (useHash !== undefined && useHash !== null) {
            (/** @type {?} */ (this)).config.useHash = useHash;
        }
        return (/** @type {?} */ (this));
    }
    /**
     * 画面遷移が発生するたびにlogging
     * @return {?}
     */
    trackingPath() {
        this.router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (event instanceof NavigationEnd) {
                if (this.isBackButton) {
                    this.isBackButton = false;
                    return;
                }
                /** @type {?} */
                const path = this.config.useHash
                    ? `#${event.urlAfterRedirects}`
                    : event.urlAfterRedirects.replace('/', '');
                /** @type {?} */
                const result = yield this.push({ path });
            }
        })));
    }
    /**
     * actionlog pathは必須のため必ず送られる
     * @param {?} action
     * @return {?}
     */
    action(action) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = this.config.useHash
                ? `#${this.router.url}`
                : this.router.url.replace('/', '');
            yield this.push({ path, action });
        });
    }
    /**
     *
     * @return {?}
     */
    stopLoggingPath() {
        this.isBackButton = true;
    }
}
LoggerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LoggerService.ctorParameters = () => [
    { type: ShHttpClientService },
    { type: Router }
];
/** @nocollapse */ LoggerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LoggerService_Factory() { return new LoggerService(i0.ɵɵinject(i1.ShHttpClientService), i0.ɵɵinject(i2.Router)); }, token: LoggerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.isBackButton;
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LoggerService.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zaC1odHRwLWNsaWVudC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9sb2dnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQWV4RCxNQUFNLE9BQU8sYUFBYTs7Ozs7SUFHeEIsWUFDVSxJQUF5QixFQUN6QixNQUFjO1FBRGQsU0FBSSxHQUFKLElBQUksQ0FBcUI7UUFDekIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUpoQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixXQUFNLEdBQVcsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQztJQUk5QyxDQUFDOzs7Ozs7OztJQUtTLElBQUksQ0FBQyxLQUFlOztZQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hELENBQUM7S0FBQTs7Ozs7Ozs7SUFJTSxTQUFTLENBQUMsTUFBd0I7Y0FDakMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsTUFBTTtRQUMvQixJQUFHLEdBQUcsRUFBRTtZQUNOLG1CQUFBLElBQUksRUFBQSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBRyxPQUFPLEtBQUssU0FBUyxJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDNUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDL0I7UUFDRCxPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFJTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFPLEtBQUssRUFBRSxFQUFFO1lBQzNDLElBQUcsS0FBSyxZQUFZLGFBQWEsRUFBQztnQkFDaEMsSUFBRyxJQUFJLENBQUMsWUFBWSxFQUFDO29CQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztvQkFDMUIsT0FBTztpQkFDUjs7c0JBQ0ssSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTztvQkFDOUIsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFO29CQUMvQixDQUFDLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDOztzQkFDdEMsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDO2FBQ3ZDO1FBQ0gsQ0FBQyxDQUFBLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUlZLE1BQU0sQ0FBQyxNQUFjOzs7a0JBQzFCLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQzlCLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO2dCQUN2QixDQUFDLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDckMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7UUFDbEMsQ0FBQztLQUFBOzs7OztJQUlNLGVBQWU7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQzs7O1lBN0RGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQWZRLG1CQUFtQjtZQUNuQixNQUFNOzs7Ozs7OztJQWdCYixxQ0FBNkI7Ozs7O0lBQzdCLCtCQUFrRDs7Ozs7SUFFaEQsNkJBQWlDOzs7OztJQUNqQywrQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNoSHR0cENsaWVudFNlcnZpY2UgfSBmcm9tICcuL3NoLWh0dHAtY2xpZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuXHJcbnR5cGUgbG9nUGFyYW0gPSB7XHJcbiAgcGF0aDogc3RyaW5nXHJcbiAgYWN0aW9uPzogc3RyaW5nXHJcbn1cclxudHlwZSBjb25maWcgPSB7XHJcbiAgdXJsIDpzdHJpbmdcclxuICB1c2VIYXNoOiBib29sZWFuXHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIExvZ2dlclNlcnZpY2Uge1xyXG4gIHByaXZhdGUgaXNCYWNrQnV0dG9uID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBjb25maWc6IGNvbmZpZyA9IHt1cmw6ICcnLCB1c2VIYXNoOiB0cnVlfTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogU2hIdHRwQ2xpZW50U2VydmljZSxcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgKSB7IH1cclxuICAvKipcclxuICAgKiBsb2dBcGnjgbjjg6rjgq/jgqjjgrnjg4hcclxuICAgKiBcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIHB1c2gocGFyYW06IGxvZ1BhcmFtKSB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy5jb25maWcudXJsLCBwYXJhbSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOioreWumuOCkuabtOaWsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25maWd1cmUoY29uZmlnIDogUGFydGlhbDxjb25maWc+KSB7XHJcbiAgICBjb25zdCB7IHVybCwgdXNlSGFzaCB9ID0gY29uZmlnO1xyXG4gICAgaWYodXJsKSB7XHJcbiAgICAgIHRoaXMuY29uZmlnLnVybCA9IHVybDtcclxuICAgIH1cclxuICAgIGlmKHVzZUhhc2ggIT09IHVuZGVmaW5lZCAmJiB1c2VIYXNoICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuY29uZmlnLnVzZUhhc2ggPSB1c2VIYXNoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOeUu+mdoumBt+enu+OBjOeZuueUn+OBmeOCi+OBn+OBs+OBq2xvZ2dpbmdcclxuICAgKi9cclxuICBwdWJsaWMgdHJhY2tpbmdQYXRoKCkge1xyXG4gICAgdGhpcy5yb3V0ZXIuZXZlbnRzLnN1YnNjcmliZShhc3luYyAoZXZlbnQpID0+IHtcclxuICAgICAgaWYoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKXtcclxuICAgICAgICBpZih0aGlzLmlzQmFja0J1dHRvbil7XHJcbiAgICAgICAgICB0aGlzLmlzQmFja0J1dHRvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5jb25maWcudXNlSGFzaCBcclxuICAgICAgICAgID8gYCMke2V2ZW50LnVybEFmdGVyUmVkaXJlY3RzfWBcclxuICAgICAgICAgIDogZXZlbnQudXJsQWZ0ZXJSZWRpcmVjdHMucmVwbGFjZSgnLycsICcnKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnB1c2goe3BhdGh9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIGFjdGlvbmxvZyBwYXRo44Gv5b+F6aCI44Gu44Gf44KB5b+F44Ga6YCB44KJ44KM44KLXHJcbiAgICovXHJcbiAgcHVibGljIGFzeW5jIGFjdGlvbihhY3Rpb246IHN0cmluZykge1xyXG4gICAgY29uc3QgcGF0aCA9IHRoaXMuY29uZmlnLnVzZUhhc2hcclxuICAgICAgPyBgIyR7dGhpcy5yb3V0ZXIudXJsfWBcclxuICAgICAgOiAgdGhpcy5yb3V0ZXIudXJsLnJlcGxhY2UoJy8nLCAnJyk7XHJcbiAgICBhd2FpdCB0aGlzLnB1c2goe3BhdGgsIGFjdGlvbn0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBcclxuICAgKi9cclxuICBwdWJsaWMgc3RvcExvZ2dpbmdQYXRoKCkge1xyXG4gICAgdGhpcy5pc0JhY2tCdXR0b24gPSB0cnVlO1xyXG4gIH1cclxuICBcclxufVxyXG4iXX0=