/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ShHttpClientConst, Response } from '../constShHttpClient';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class VersionService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        //versionのキャッシュ
        this.versions = [];
    }
    /**
     * versionの初期化
     * @param {...?} urls
     * @return {?}
     */
    initVersion(...urls) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!urls)
                return;
            yield Promise.all(urls.map((/**
             * @param {?} url
             * @return {?}
             */
            (url) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                /** @type {?} */
                const result = yield this.fetchVersion(url);
                this.setVersionNo(url, result);
                return;
            }))));
        });
    }
    /**
     * urlからキーを生成
     * @private
     * @param {?} url
     * @return {?}
     */
    getKeyUrl(url) {
        if (!url)
            return "";
        return url.split(ShHttpClientConst.API_URL)[0] + ShHttpClientConst.VERSION_API_URL;
    }
    /**
     * バックエンドのversion情報を取得
     * @param {?} url
     * @return {?}
     */
    fetchVersion(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const s = this.splitByApiUrl(url);
            /** @type {?} */
            const token = sessionStorage.getItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`);
            return this.http.get(s, { observe: Response, headers: { "Authorization": token ? ShHttpClientConst.Bearer + token : ShHttpClientConst.Bearer } }).toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                if (response.body.redirectURL == ShHttpClientConst.RELOAD) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () { location.reload(); }), 100);
                }
                else if ((response.body.redirectURL || "").indexOf(ShHttpClientConst.HTTP) != -1) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () { location.href = response.body.redirectURL; }), 100);
                }
                return response.body.applicationData ? response.body.applicationData.versionNo : "";
            }));
        });
    }
    /**
     * urlをsplitした値を返す
     * @private
     * @param {?} url
     * @return {?}
     */
    splitByApiUrl(url) {
        return url.split(ShHttpClientConst.API_URL)[0] + ShHttpClientConst.VERSION_API_URL || '';
    }
    /**
     * キャッシュしているversionをURLから取得する
     * @param {?} url
     * @return {?}
     */
    getVersion(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const keyUrl = this.getKeyUrl(url);
            /** @type {?} */
            const projectVersion = this.versions
                .find((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                return value.keyUrl === keyUrl;
            }));
            if (!projectVersion) {
                /** @type {?} */
                const version = yield this.fetchVersion(url)
                // //キャッシュする
                ;
                // //キャッシュする
                this.setVersionNo(url, version);
                return version;
            }
            return projectVersion.version;
        });
    }
    /**
     * 受け取ったversionNoをキャッシュする
     * @param {?} url apiUrl
     * @param {?} versionNo バックエンドのversion
     * @return {?}
     */
    setVersionNo(url, versionNo) {
        /** @type {?} */
        const keyUrl = this.getKeyUrl(url);
        if (!keyUrl || !versionNo)
            return;
        /** @type {?} */
        const result = this.versions.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item.keyUrl == keyUrl));
        if (result != -1) {
            this.versions[result] = { keyUrl, version: versionNo };
        }
        else {
            this.versions.push({ keyUrl, version: versionNo });
        }
    }
}
VersionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
VersionService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ VersionService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function VersionService_Factory() { return new VersionService(i0.ɵɵinject(i1.HttpClient)); }, token: VersionService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    VersionService.prototype.versions;
    /**
     * @type {?}
     * @private
     */
    VersionService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,