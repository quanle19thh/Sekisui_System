(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs/operators'), require('rxjs'), require('@angular/router'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('sh-http-client', ['exports', '@angular/core', '@angular/common/http', 'rxjs/operators', 'rxjs', '@angular/router', '@angular/forms', '@angular/common'], factory) :
    (global = global || self, factory(global['sh-http-client'] = {}, global.ng.core, global.ng.common.http, global.rxjs.operators, global.rxjs, global.ng.router, global.ng.forms, global.ng.common));
}(this, (function (exports, core, http, operators, rxjs, router, forms, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //@dynamic
    var   
    //@dynamic
    Alert = /** @class */ (function () {
        function Alert() {
        }
        return Alert;
    }());
    if (false) {
        /** @type {?} */
        Alert.prototype.type;
        /** @type {?} */
        Alert.prototype.dismissSeconds;
        /** @type {?} */
        Alert.prototype.message;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //@dynamic
    /**
     * @template T
     */
    var   
    //@dynamic
    /**
     * @template T
     */
    ApiResponseBody = /** @class */ (function () {
        function ApiResponseBody() {
        }
        return ApiResponseBody;
    }());
    if (false) {
        /** @type {?} */
        ApiResponseBody.prototype.result;
        /** @type {?} */
        ApiResponseBody.prototype.message;
        /** @type {?} */
        ApiResponseBody.prototype.redirectURL;
        /** @type {?} */
        ApiResponseBody.prototype.hasAlert;
        /** @type {?} */
        ApiResponseBody.prototype.hasValidationErrors;
        /** @type {?} */
        ApiResponseBody.prototype.alert;
        /** @type {?} */
        ApiResponseBody.prototype.validationErrors;
        /** @type {?} */
        ApiResponseBody.prototype.applicationData;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //@dynamic
    /**
     * @template T
     */
    var   
    //@dynamic
    /**
     * @template T
     */
    ApiResponse = /** @class */ (function () {
        function ApiResponse() {
        }
        return ApiResponse;
    }());
    if (false) {
        /** @type {?} */
        ApiResponse.prototype.status;
        /** @type {?} */
        ApiResponse.prototype.body;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHMessageUtl = /** @class */ (function () {
        function SHMessageUtl() {
        }
        /**
        * テンプレート文字列　形式：{0}{1}{2}
        */
        /**
         * テンプレート文字列　形式：{0}{1}{2}
         * @param {?} text
         * @param {...?} values
         * @return {?}
         */
        SHMessageUtl.prototype.stringFormat = /**
         * テンプレート文字列　形式：{0}{1}{2}
         * @param {?} text
         * @param {...?} values
         * @return {?}
         */
        function (text) {
            var values = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                values[_i - 1] = arguments[_i];
            }
            /** @type {?} */
            var result = text;
            values.forEach((/**
             * @param {?} value
             * @param {?} i
             * @return {?}
             */
            function (value, i) {
                result = result.split("{" + i + "}").join(value);
            }));
            return result;
        };
        return SHMessageUtl;
    }());
    var SHMessageConfirm = /** @class */ (function (_super) {
        __extends(SHMessageConfirm, _super);
        function SHMessageConfirm() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
        * 実行確認メッセージ
        */
        /**
         * 実行確認メッセージ
         * @param {?} text
         * @return {?}
         */
        SHMessageConfirm.prototype.execution = /**
         * 実行確認メッセージ
         * @param {?} text
         * @return {?}
         */
        function (text) {
            return this.stringFormat("{0}を行います。\nよろしいですか？", text);
        };
        /**
        * 終了確認メッセージ
        */
        /**
         * 終了確認メッセージ
         * @param {?} text
         * @return {?}
         */
        SHMessageConfirm.prototype.finalization = /**
         * 終了確認メッセージ
         * @param {?} text
         * @return {?}
         */
        function (text) {
            return this.stringFormat("{0}を終了します。\nよろしいですか？", text);
        };
        /**
        * 登録確認メッセージ
        */
        /**
         * 登録確認メッセージ
         * @return {?}
         */
        SHMessageConfirm.prototype.creatingRecord = /**
         * 登録確認メッセージ
         * @return {?}
         */
        function () {
            return this.execution("登録");
        };
        /**
        * 修正確認メッセージ
        */
        /**
         * 修正確認メッセージ
         * @return {?}
         */
        SHMessageConfirm.prototype.editingRecord = /**
         * 修正確認メッセージ
         * @return {?}
         */
        function () {
            return this.execution("修正");
        };
        /**
        * 削除確認メッセージ
        */
        /**
         * 削除確認メッセージ
         * @return {?}
         */
        SHMessageConfirm.prototype.deletingRecord = /**
         * 削除確認メッセージ
         * @return {?}
         */
        function () {
            return this.execution("削除");
        };
        /**
        * 更新確認メッセージ
        */
        /**
         * 更新確認メッセージ
         * @return {?}
         */
        SHMessageConfirm.prototype.updatingRecord = /**
         * 更新確認メッセージ
         * @return {?}
         */
        function () {
            return this.execution("更新");
        };
        /**
        * 印刷確認メッセージ
        */
        /**
         * 印刷確認メッセージ
         * @return {?}
         */
        SHMessageConfirm.prototype.printingOut = /**
         * 印刷確認メッセージ
         * @return {?}
         */
        function () {
            return this.execution("印刷");
        };
        /**
        * 編集内容が失われる警告メッセージ
        */
        /**
         * 編集内容が失われる警告メッセージ
         * @return {?}
         */
        SHMessageConfirm.prototype.editingContentWillBeLost = /**
         * 編集内容が失われる警告メッセージ
         * @return {?}
         */
        function () {
            return "編集内容が失われます。\nよろしいですか？";
        };
        return SHMessageConfirm;
    }(SHMessageUtl));
    var SHMessageFatal = /** @class */ (function (_super) {
        __extends(SHMessageFatal, _super);
        function SHMessageFatal() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
        * システムエラーメッセージ
        */
        /**
         * システムエラーメッセージ
         * @return {?}
         */
        SHMessageFatal.prototype.systemErrorHasOccurred = /**
         * システムエラーメッセージ
         * @return {?}
         */
        function () {
            return "システムエラーが発生しました。システム管理者に連絡してください。";
        };
        return SHMessageFatal;
    }(SHMessageUtl));
    var SHMessageInfo = /** @class */ (function (_super) {
        __extends(SHMessageInfo, _super);
        function SHMessageInfo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
        * 前のページに戻る場合の確認メッセージ
        */
        /**
         * 前のページに戻る場合の確認メッセージ
         * @param {?} btnName
         * @return {?}
         */
        SHMessageInfo.prototype.dontUseHistoryBack = /**
         * 前のページに戻る場合の確認メッセージ
         * @param {?} btnName
         * @return {?}
         */
        function (btnName) {
            return this.stringFormat("前のページに戻る場合、{0}ボタンから戻ってください。", btnName);
        };
        return SHMessageInfo;
    }(SHMessageUtl));
    var SHMessage = /** @class */ (function () {
        function SHMessage() {
            /**
             * Confirm
             */
            this.confirm = new SHMessageConfirm();
            /**
             * Fatal
             */
            this.fatal = new SHMessageFatal();
            /**
             * Info
             */
            this.info = new SHMessageInfo();
        }
        return SHMessage;
    }());
    if (false) {
        /**
         * Confirm
         * @type {?}
         */
        SHMessage.prototype.confirm;
        /**
         * Fatal
         * @type {?}
         */
        SHMessage.prototype.fatal;
        /**
         * Info
         * @type {?}
         */
        SHMessage.prototype.info;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ShHttpClientConst = {
        STATUS_OK: 200,
        RELOAD: "reload",
        HTTP: "http",
        API_URL: "/api/",
        VERSION_API_URL: "/api/Version/",
        VERSION_NO: "Version-No",
        AUTHORIZATION_TOKEN: "AccessToken",
        Bearer: 'Bearer ',
        REDIRECT_PATH: 'REDIRECT_PATH',
        SH_QUERY_PARAMS: 'SH_QUERY_PARAMS'
    };
    /** @type {?} */
    var Response = "response";
    /** @type {?} */
    var VersionNo = "Version-No";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var VersionService = /** @class */ (function () {
        function VersionService(http) {
            this.http = http;
            //versionのキャッシュ
            this.versions = [];
        }
        /**
         * versionの初期化
         */
        /**
         * versionの初期化
         * @param {...?} urls
         * @return {?}
         */
        VersionService.prototype.initVersion = /**
         * versionの初期化
         * @param {...?} urls
         * @return {?}
         */
        function () {
            var urls = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                urls[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!urls)
                                return [2 /*return*/];
                            return [4 /*yield*/, Promise.all(urls.map((/**
                                 * @param {?} url
                                 * @return {?}
                                 */
                                function (url) { return __awaiter(_this, void 0, void 0, function () {
                                    var result;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.fetchVersion(url)];
                                            case 1:
                                                result = _a.sent();
                                                this.setVersionNo(url, result);
                                                return [2 /*return*/];
                                        }
                                    });
                                }); })))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * urlからキーを生成
         * @param url
         */
        /**
         * urlからキーを生成
         * @private
         * @param {?} url
         * @return {?}
         */
        VersionService.prototype.getKeyUrl = /**
         * urlからキーを生成
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            if (!url)
                return "";
            return url.split(ShHttpClientConst.API_URL)[0] + ShHttpClientConst.VERSION_API_URL;
        };
        /**
         * バックエンドのversion情報を取得
         */
        /**
         * バックエンドのversion情報を取得
         * @param {?} url
         * @return {?}
         */
        VersionService.prototype.fetchVersion = /**
         * バックエンドのversion情報を取得
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var s, token;
                return __generator(this, function (_a) {
                    s = this.splitByApiUrl(url);
                    token = sessionStorage.getItem("" + ShHttpClientConst.AUTHORIZATION_TOKEN);
                    return [2 /*return*/, this.http.get(s, { observe: Response, headers: { "Authorization": token ? ShHttpClientConst.Bearer + token : ShHttpClientConst.Bearer } }).toPromise()
                            .then((/**
                         * @param {?} response
                         * @return {?}
                         */
                        function (response) {
                            if (response.body.redirectURL == ShHttpClientConst.RELOAD) {
                                setTimeout((/**
                                 * @return {?}
                                 */
                                function () { location.reload(); }), 100);
                            }
                            else if ((response.body.redirectURL || "").indexOf(ShHttpClientConst.HTTP) != -1) {
                                setTimeout((/**
                                 * @return {?}
                                 */
                                function () { location.href = response.body.redirectURL; }), 100);
                            }
                            return response.body.applicationData ? response.body.applicationData.versionNo : "";
                        }))];
                });
            });
        };
        /**
         * urlをsplitした値を返す
         */
        /**
         * urlをsplitした値を返す
         * @private
         * @param {?} url
         * @return {?}
         */
        VersionService.prototype.splitByApiUrl = /**
         * urlをsplitした値を返す
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return url.split(ShHttpClientConst.API_URL)[0] + ShHttpClientConst.VERSION_API_URL || '';
        };
        /**
         * キャッシュしているversionをURLから取得する
         * @param url
         */
        /**
         * キャッシュしているversionをURLから取得する
         * @param {?} url
         * @return {?}
         */
        VersionService.prototype.getVersion = /**
         * キャッシュしているversionをURLから取得する
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var keyUrl, projectVersion, version;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            keyUrl = this.getKeyUrl(url);
                            projectVersion = this.versions
                                .find((/**
                             * @param {?} value
                             * @return {?}
                             */
                            function (value) {
                                return value.keyUrl === keyUrl;
                            }));
                            if (!!projectVersion) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.fetchVersion(url)
                                // //キャッシュする
                            ];
                        case 1:
                            version = _a.sent();
                            // //キャッシュする
                            this.setVersionNo(url, version);
                            return [2 /*return*/, version];
                        case 2: return [2 /*return*/, projectVersion.version];
                    }
                });
            });
        };
        /**
         * 受け取ったversionNoをキャッシュする
         * @param url apiUrl
         * @param versionNo バックエンドのversion
         */
        /**
         * 受け取ったversionNoをキャッシュする
         * @param {?} url apiUrl
         * @param {?} versionNo バックエンドのversion
         * @return {?}
         */
        VersionService.prototype.setVersionNo = /**
         * 受け取ったversionNoをキャッシュする
         * @param {?} url apiUrl
         * @param {?} versionNo バックエンドのversion
         * @return {?}
         */
        function (url, versionNo) {
            /** @type {?} */
            var keyUrl = this.getKeyUrl(url);
            if (!keyUrl || !versionNo)
                return;
            /** @type {?} */
            var result = this.versions.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.keyUrl == keyUrl; }));
            if (result != -1) {
                this.versions[result] = { keyUrl: keyUrl, version: versionNo };
            }
            else {
                this.versions.push({ keyUrl: keyUrl, version: versionNo });
            }
        };
        VersionService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        VersionService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ VersionService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function VersionService_Factory() { return new VersionService(core.ɵɵinject(http.HttpClient)); }, token: VersionService, providedIn: "root" });
        return VersionService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        VersionService.prototype.versions;
        /**
         * @type {?}
         * @private
         */
        VersionService.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AlertHandlerService = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function AlertHandlerService() {
            this.Alert = new Alert();
            this.AlertHandlerSubject = new rxjs.Subject();
            this.AlertHandlerState = this.AlertHandlerSubject.asObservable();
        }
        /**
        * アラートを追加する
        * @param validationType 検証結果タイプ
        * @param validationMessages 検証結果メッセージ配列
        */
        /**
         * アラートを追加する
         * @param {?} alertInfo
         * @return {?}
         */
        AlertHandlerService.prototype.setAlert = /**
         * アラートを追加する
         * @param {?} alertInfo
         * @return {?}
         */
        function (alertInfo) {
            this.Alert = alertInfo;
            this.AlertHandlerSubject.next(this.Alert);
        };
        /**
         * アラートをクリアする
         */
        /**
         * アラートをクリアする
         * @return {?}
         */
        AlertHandlerService.prototype.alertClear = /**
         * アラートをクリアする
         * @return {?}
         */
        function () {
            this.Alert.message = "";
            this.Alert.type = "";
            this.AlertHandlerSubject.next(this.Alert);
        };
        AlertHandlerService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        AlertHandlerService.ctorParameters = function () { return []; };
        /** @nocollapse */ AlertHandlerService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AlertHandlerService_Factory() { return new AlertHandlerService(); }, token: AlertHandlerService, providedIn: "root" });
        return AlertHandlerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AlertHandlerService.prototype.Alert;
        /**
         * @type {?}
         * @private
         */
        AlertHandlerService.prototype.AlertHandlerSubject;
        /** @type {?} */
        AlertHandlerService.prototype.AlertHandlerState;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValidationError = /** @class */ (function () {
        function ValidationError() {
        }
        return ValidationError;
    }());
    if (false) {
        /** @type {?} */
        ValidationError.prototype.show;
        /** @type {?} */
        ValidationError.prototype.meesages;
    }
    var ValidationErrorService = /** @class */ (function () {
        function ValidationErrorService() {
            this.validationError = new ValidationError();
            this.validationErrorSubject = new rxjs.Subject();
            this.validationErrorState = this.validationErrorSubject.asObservable();
        }
        /**
         * @param {?} validationErrors
         * @return {?}
         */
        ValidationErrorService.prototype.setValidationError = /**
         * @param {?} validationErrors
         * @return {?}
         */
        function (validationErrors) {
            this.validationError.show = true;
            this.validationError.meesages = validationErrors;
            this.validationErrorSubject.next(this.validationError);
        };
        /**
         * @return {?}
         */
        ValidationErrorService.prototype.clearValidationError = /**
         * @return {?}
         */
        function () {
            this.validationError.show = false;
            this.validationError.meesages = null;
            this.validationErrorSubject.next(this.validationError);
        };
        ValidationErrorService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ValidationErrorService.ctorParameters = function () { return []; };
        /** @nocollapse */ ValidationErrorService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ValidationErrorService_Factory() { return new ValidationErrorService(); }, token: ValidationErrorService, providedIn: "root" });
        return ValidationErrorService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ValidationErrorService.prototype.validationError;
        /**
         * @type {?}
         * @private
         */
        ValidationErrorService.prototype.validationErrorSubject;
        /** @type {?} */
        ValidationErrorService.prototype.validationErrorState;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SH_BROWSER_STORAGE = new core.InjectionToken("Browser Storage", {
        providedIn: "root",
        factory: (/**
         * @return {?}
         */
        function () { return localStorage; })
    });
    /** @type {?} */
    var USE_HASH = new core.InjectionToken('UseHash', {
        providedIn: "root",
        factory: (/**
         * @return {?}
         */
        function () { return ({ useHash: true }); })
    });
    var ShRedirectService = /** @class */ (function () {
        function ShRedirectService(router, storage, isHash) {
            this.router = router;
            this.storage = storage;
            this.isHash = isHash;
        }
        Object.defineProperty(ShRedirectService.prototype, "redirectPath", {
            get: /**
             * @return {?}
             */
            function () {
                return this.storage.getItem(ShHttpClientConst.REDIRECT_PATH);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShRedirectService.prototype, "queryParams", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var query = new URLSearchParams(this.storage.getItem(ShHttpClientConst.SH_QUERY_PARAMS)) || null;
                return query;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ShRedirectService.prototype.setRedirectPath = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var path = '';
            /** @type {?} */
            var query = '';
            if (this.isHash.useHash) {
                /** @type {?} */
                var pathparams = location.href.split('#')[1].split('?');
                path = pathparams[0];
                query = pathparams[1] || '';
            }
            else {
                path = location.pathname;
                path = location.search;
            }
            this.storage.setItem(ShHttpClientConst.REDIRECT_PATH, path);
            this.storage.setItem(ShHttpClientConst.SH_QUERY_PARAMS, query);
        };
        /**
         * @return {?}
         */
        ShRedirectService.prototype.redirect = /**
         * @return {?}
         */
        function () {
            this.router.navigate([this.storage.getItem(ShHttpClientConst.REDIRECT_PATH)]);
            this.storage.setItem(ShHttpClientConst.REDIRECT_PATH, '');
        };
        ShRedirectService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ShRedirectService.ctorParameters = function () { return [
            { type: router.Router },
            { type: Storage, decorators: [{ type: core.Inject, args: [SH_BROWSER_STORAGE,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [USE_HASH,] }] }
        ]; };
        /** @nocollapse */ ShRedirectService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ShRedirectService_Factory() { return new ShRedirectService(core.ɵɵinject(router.Router), core.ɵɵinject(SH_BROWSER_STORAGE), core.ɵɵinject(USE_HASH)); }, token: ShRedirectService, providedIn: "root" });
        return ShRedirectService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShRedirectService.prototype.router;
        /**
         * @type {?}
         * @private
         */
        ShRedirectService.prototype.storage;
        /**
         * @type {?}
         * @private
         */
        ShRedirectService.prototype.isHash;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShHttpClientService = /** @class */ (function () {
        function ShHttpClientService(http, versionService, alertHandlerService, validationErrorService, redirectService) {
            this.http = http;
            this.versionService = versionService;
            this.alertHandlerService = alertHandlerService;
            this.validationErrorService = validationErrorService;
            this.redirectService = redirectService;
        }
        Object.defineProperty(ShHttpClientService.prototype, "hasToken", {
            /**
             * AccessTokenの有無を返す
             */
            get: /**
             * AccessTokenの有無を返す
             * @return {?}
             */
            function () {
                return !!sessionStorage.getItem('AccessToken');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * httpOptionを返す
         * @param versionNo
         */
        /**
         * httpOptionを返す
         * @private
         * @param {?} versionNo
         * @return {?}
         */
        ShHttpClientService.prototype.getOption = /**
         * httpOptionを返す
         * @private
         * @param {?} versionNo
         * @return {?}
         */
        function (versionNo) {
            /** @type {?} */
            var token = sessionStorage.getItem("" + ShHttpClientConst.AUTHORIZATION_TOKEN);
            /** @type {?} */
            var headers = new http.HttpHeaders({ "Version-No": versionNo });
            headers = headers.set('Content-Type', 'application/json; charset=utf-8');
            /** @type {?} */
            var accessToken = token ? ShHttpClientConst.Bearer + token : ShHttpClientConst.Bearer;
            headers = headers.set('Authorization', accessToken);
            return { observe: Response, headers: headers };
        };
        /**
        * GET
        * @param apiResponseBody レスポンスBody情報
        * @return レスポンスBody内のbody句
        */
        /**
         * GET
         * @private
         * @template T
         * @param {?} apiResponseBody レスポンスBody情報
         * @param {?} showValidationResult
         * @return {?} レスポンスBody内のbody句
         */
        ShHttpClientService.prototype.getApiResponseBody = /**
         * GET
         * @private
         * @template T
         * @param {?} apiResponseBody レスポンスBody情報
         * @param {?} showValidationResult
         * @return {?} レスポンスBody内のbody句
         */
        function (apiResponseBody, showValidationResult) {
            if (apiResponseBody.status != ShHttpClientConst.STATUS_OK)
                return new ApiResponseBody();
            if (apiResponseBody.body) {
                if (apiResponseBody.body.message) {
                    alert(apiResponseBody.body.message);
                }
                if (apiResponseBody.body.message) {
                    alert(apiResponseBody.body.message);
                }
                if (apiResponseBody.body.redirectURL == ShHttpClientConst.RELOAD) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () { location.reload(); }), 100);
                }
                else if ((apiResponseBody.body.redirectURL || "").indexOf(ShHttpClientConst.HTTP) != -1) {
                    // useHashがtrueになっていることが前提条件です
                    this.redirectService.setRedirectPath();
                    setTimeout((/**
                     * @return {?}
                     */
                    function () { location.href = apiResponseBody.body.redirectURL; }), 100);
                }
                if (showValidationResult) {
                    //バリデーション処理
                    if (apiResponseBody.body.hasValidationErrors) {
                        this.validationErrorService.setValidationError(apiResponseBody.body.validationErrors);
                    }
                    else {
                        this.validationErrorService.clearValidationError();
                    }
                }
                if (apiResponseBody.body.alert) {
                    //アラート処理
                    this.alertHandlerService.setAlert(apiResponseBody.body.alert);
                }
            }
            return apiResponseBody.body;
        };
        /**
         * 認証済みかどうか
         */
        /**
         * 認証済みかどうか
         * @private
         * @return {?}
         */
        ShHttpClientService.prototype.isAuthenticate = /**
         * 認証済みかどうか
         * @private
         * @return {?}
         */
        function () {
            return !!sessionStorage.getItem("" + ShHttpClientConst.AUTHORIZATION_TOKEN);
        };
        /**
        * GET
        * @param url ApiUrl
        * @return API返却結果
        */
        /**
         * GET
         * @template T
         * @param {?} url ApiUrl
         * @param {?=} showValidationResult
         * @return {?} API返却結果
         */
        ShHttpClientService.prototype.get = /**
         * GET
         * @template T
         * @param {?} url ApiUrl
         * @param {?=} showValidationResult
         * @return {?} API返却結果
         */
        function (url, showValidationResult) {
            if (showValidationResult === void 0) { showValidationResult = true; }
            return __awaiter(this, void 0, void 0, function () {
                var versionNo, option;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            versionNo = "";
                            if (!this.isAuthenticate()) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.versionService.getVersion(url)];
                        case 1:
                            versionNo = _a.sent();
                            _a.label = 2;
                        case 2:
                            option = this.getOption(versionNo);
                            return [2 /*return*/, this.http.get(this.encodeUrl(url), option).pipe(operators.map((/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    return _this.getApiResponseBody(response, showValidationResult);
                                })), operators.catchError(this.handleError("get error"))).toPromise()];
                    }
                });
            });
        };
        /**
        * POST
        * @param url ApiUrl
        * @param data データ
        * @return API返却結果
        */
        /**
         * POST
         * @template T
         * @param {?} url ApiUrl
         * @param {?} data データ
         * @param {?=} showValidationResult
         * @return {?} API返却結果
         */
        ShHttpClientService.prototype.post = /**
         * POST
         * @template T
         * @param {?} url ApiUrl
         * @param {?} data データ
         * @param {?=} showValidationResult
         * @return {?} API返却結果
         */
        function (url, data, showValidationResult) {
            if (showValidationResult === void 0) { showValidationResult = true; }
            return __awaiter(this, void 0, void 0, function () {
                var versionNo, option;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.versionService.getVersion(url)];
                        case 1:
                            versionNo = _a.sent();
                            option = this.getOption(versionNo);
                            return [2 /*return*/, this.http.post(url, data, option).pipe(operators.map((/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    return _this.getApiResponseBody(response, showValidationResult);
                                })), operators.catchError(this.handleError("post error"))).toPromise()];
                    }
                });
            });
        };
        /**
        * PUT
        * @param url ApiUrl
        * @param data データ
        * @return API返却結果
        */
        /**
         * PUT
         * @template T
         * @param {?} url ApiUrl
         * @param {?} data データ
         * @param {?=} showValidationResult
         * @return {?} API返却結果
         */
        ShHttpClientService.prototype.put = /**
         * PUT
         * @template T
         * @param {?} url ApiUrl
         * @param {?} data データ
         * @param {?=} showValidationResult
         * @return {?} API返却結果
         */
        function (url, data, showValidationResult) {
            if (showValidationResult === void 0) { showValidationResult = true; }
            return __awaiter(this, void 0, void 0, function () {
                var versionNo, option;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.versionService.getVersion(url)];
                        case 1:
                            versionNo = _a.sent();
                            option = this.getOption(versionNo);
                            return [2 /*return*/, this.http.put(url, data, option).pipe(operators.map((/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    return _this.getApiResponseBody(response, showValidationResult);
                                })), operators.catchError(this.handleError("put error"))).toPromise()];
                    }
                });
            });
        };
        /**
        * DELETE
        * @param url ApiUrl
        * @return API返却結果
        */
        /**
         * DELETE
         * @template T
         * @param {?} url ApiUrl
         * @param {?=} showValidationResult
         * @return {?} API返却結果
         */
        ShHttpClientService.prototype.delete = /**
         * DELETE
         * @template T
         * @param {?} url ApiUrl
         * @param {?=} showValidationResult
         * @return {?} API返却結果
         */
        function (url, showValidationResult) {
            if (showValidationResult === void 0) { showValidationResult = true; }
            return __awaiter(this, void 0, void 0, function () {
                var versionNo, option;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.versionService.getVersion(url)];
                        case 1:
                            versionNo = _a.sent();
                            option = this.getOption(versionNo);
                            return [2 /*return*/, this.http.delete(url, option).pipe(operators.map((/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    return _this.getApiResponseBody(response, showValidationResult);
                                })), operators.catchError(this.handleError("delete error"))).toPromise()];
                    }
                });
            });
        };
        /**
         * エラーハンドラ
         * @param operation どの処理でエラーが起きたか
         * @param result 空の配列か指定無しを返して処理を継続させる
         */
        /**
         * エラーハンドラ
         * @private
         * @template T
         * @param {?=} operation どの処理でエラーが起きたか
         * @param {?=} result 空の配列か指定無しを返して処理を継続させる
         * @return {?}
         */
        ShHttpClientService.prototype.handleError = /**
         * エラーハンドラ
         * @private
         * @template T
         * @param {?=} operation どの処理でエラーが起きたか
         * @param {?=} result 空の配列か指定無しを返して処理を継続させる
         * @return {?}
         */
        function (operation, result) {
            if (operation === void 0) { operation = 'operation'; }
            return (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                /** @type {?} */
                var msg = new SHMessage();
                alert(msg.fatal.systemErrorHasOccurred());
                throw error;
            });
        };
        /**
         * urlをエンコードする。インターステージ用の対応
         * @param url
         */
        /**
         * urlをエンコードする。インターステージ用の対応
         * @private
         * @param {?} url
         * @return {?}
         */
        ShHttpClientService.prototype.encodeUrl = /**
         * urlをエンコードする。インターステージ用の対応
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            if (!url)
                return;
            if (url.indexOf('?')) {
                return encodeURI(url);
            }
            return url;
        };
        ShHttpClientService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ShHttpClientService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: VersionService },
            { type: AlertHandlerService },
            { type: ValidationErrorService },
            { type: ShRedirectService }
        ]; };
        /** @nocollapse */ ShHttpClientService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ShHttpClientService_Factory() { return new ShHttpClientService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(VersionService), core.ɵɵinject(AlertHandlerService), core.ɵɵinject(ValidationErrorService), core.ɵɵinject(ShRedirectService)); }, token: ShHttpClientService, providedIn: "root" });
        return ShHttpClientService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShHttpClientService.prototype.http;
        /**
         * @type {?}
         * @private
         */
        ShHttpClientService.prototype.versionService;
        /**
         * @type {?}
         * @private
         */
        ShHttpClientService.prototype.alertHandlerService;
        /**
         * @type {?}
         * @private
         */
        ShHttpClientService.prototype.validationErrorService;
        /**
         * @type {?}
         * @private
         */
        ShHttpClientService.prototype.redirectService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthService = /** @class */ (function () {
        function AuthService(http) {
            this.http = http;
        }
        /**
         * 認証済みかの判定
         */
        /**
         * 認証済みかの判定
         * @return {?}
         */
        AuthService.prototype.isAuthenticated = /**
         * 認証済みかの判定
         * @return {?}
         */
        function () {
            this.token = sessionStorage.getItem("" + ShHttpClientConst.AUTHORIZATION_TOKEN);
            if (this.token) {
                return rxjs.of(true);
            }
            else {
                return rxjs.of(false);
            }
        };
        /**
         * 認証
         * @param jigCode
         * @param tanCode
         * @param password
         */
        /**
         * 認証
         * @param {?} jigCode
         * @param {?} tanCode
         * @param {?} password
         * @return {?}
         */
        AuthService.prototype.login = /**
         * 認証
         * @param {?} jigCode
         * @param {?} tanCode
         * @param {?} password
         * @return {?}
         */
        function (jigCode, tanCode, password) {
            //実際はデータベースなり、ユーザー管理するサービスなりに問い合わせて戻り値を返す
            //サーバーとの通信の結果をlacalStorageへ保存（今は仮実装）
            sessionStorage.setItem(ShHttpClientConst.AUTHORIZATION_TOKEN, jigCode + tanCode + password);
            //通信の結果で分岐する
            if (true) {
                return rxjs.of(true);
            }
            else {
                /**認証失敗時 */
                return rxjs.of(false);
            }
        };
        /**
         * ログアウト
         * リダイレクトはガードで行う
         */
        /**
         * ログアウト
         * リダイレクトはガードで行う
         * @param {?} url
         * @return {?}
         */
        AuthService.prototype.logout = /**
         * ログアウト
         * リダイレクトはガードで行う
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return this.http.get(url).then((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                sessionStorage.removeItem(ShHttpClientConst.AUTHORIZATION_TOKEN);
            }));
        };
        AuthService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        AuthService.ctorParameters = function () { return [
            { type: ShHttpClientService }
        ]; };
        /** @nocollapse */ AuthService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(core.ɵɵinject(ShHttpClientService)); }, token: AuthService, providedIn: "root" });
        return AuthService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AuthService.prototype.token;
        /**
         * @type {?}
         * @private
         */
        AuthService.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NavigationService = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function NavigationService() {
            //ユーザーのブラウザバック実行状態
            this.isBackClicked = false;
        }
        /**
         * ユーザーのブラウザバック実行を保存する
         * @return true/false
         */
        /**
         * ユーザーのブラウザバック実行を保存する
         * @return {?} true/false
         */
        NavigationService.prototype.getBackClicked = /**
         * ユーザーのブラウザバック実行を保存する
         * @return {?} true/false
         */
        function () {
            return this.isBackClicked;
        };
        /**
         * ユーザーのブラウザバック実行を保存する
         * @param isBackClicked
         */
        /**
         * ユーザーのブラウザバック実行を保存する
         * @param {?} isBackClicked
         * @return {?}
         */
        NavigationService.prototype.setBackClicked = /**
         * ユーザーのブラウザバック実行を保存する
         * @param {?} isBackClicked
         * @return {?}
         */
        function (isBackClicked) {
            this.isBackClicked = isBackClicked;
        };
        NavigationService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NavigationService.ctorParameters = function () { return []; };
        /** @nocollapse */ NavigationService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NavigationService_Factory() { return new NavigationService(); }, token: NavigationService, providedIn: "root" });
        return NavigationService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NavigationService.prototype.isBackClicked;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LoggerService = /** @class */ (function () {
        function LoggerService(http, router) {
            this.http = http;
            this.router = router;
            this.isBackButton = false;
            this.config = { url: '', useHash: true };
        }
        /**
         * logApiへリクエスト
         *
         */
        /**
         * logApiへリクエスト
         *
         * @private
         * @param {?} param
         * @return {?}
         */
        LoggerService.prototype.push = /**
         * logApiへリクエスト
         *
         * @private
         * @param {?} param
         * @return {?}
         */
        function (param) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.http.post(this.config.url, param)];
                });
            });
        };
        /**
         * 設定を更新
         */
        /**
         * 設定を更新
         * @template THIS
         * @this {THIS}
         * @param {?} config
         * @return {THIS}
         */
        LoggerService.prototype.configure = /**
         * 設定を更新
         * @template THIS
         * @this {THIS}
         * @param {?} config
         * @return {THIS}
         */
        function (config) {
            var url = config.url, useHash = config.useHash;
            if (url) {
                (/** @type {?} */ (this)).config.url = url;
            }
            if (useHash !== undefined && useHash !== null) {
                (/** @type {?} */ (this)).config.useHash = useHash;
            }
            return (/** @type {?} */ (this));
        };
        /**
         * 画面遷移が発生するたびにlogging
         */
        /**
         * 画面遷移が発生するたびにlogging
         * @return {?}
         */
        LoggerService.prototype.trackingPath = /**
         * 画面遷移が発生するたびにlogging
         * @return {?}
         */
        function () {
            var _this = this;
            this.router.events.subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return __awaiter(_this, void 0, void 0, function () {
                var path, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(event instanceof router.NavigationEnd)) return [3 /*break*/, 2];
                            if (this.isBackButton) {
                                this.isBackButton = false;
                                return [2 /*return*/];
                            }
                            path = this.config.useHash
                                ? "#" + event.urlAfterRedirects
                                : event.urlAfterRedirects.replace('/', '');
                            return [4 /*yield*/, this.push({ path: path })];
                        case 1:
                            result = _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            }); }));
        };
        /**
         * actionlog pathは必須のため必ず送られる
         */
        /**
         * actionlog pathは必須のため必ず送られる
         * @param {?} action
         * @return {?}
         */
        LoggerService.prototype.action = /**
         * actionlog pathは必須のため必ず送られる
         * @param {?} action
         * @return {?}
         */
        function (action) {
            return __awaiter(this, void 0, void 0, function () {
                var path;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            path = this.config.useHash
                                ? "#" + this.router.url
                                : this.router.url.replace('/', '');
                            return [4 /*yield*/, this.push({ path: path, action: action })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        LoggerService.prototype.stopLoggingPath = /**
         *
         * @return {?}
         */
        function () {
            this.isBackButton = true;
        };
        LoggerService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LoggerService.ctorParameters = function () { return [
            { type: ShHttpClientService },
            { type: router.Router }
        ]; };
        /** @nocollapse */ LoggerService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function LoggerService_Factory() { return new LoggerService(core.ɵɵinject(ShHttpClientService), core.ɵɵinject(router.Router)); }, token: LoggerService, providedIn: "root" });
        return LoggerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        LoggerService.prototype.isBackButton;
        /**
         * @type {?}
         * @private
         */
        LoggerService.prototype.config;
        /**
         * @type {?}
         * @private
         */
        LoggerService.prototype.http;
        /**
         * @type {?}
         * @private
         */
        LoggerService.prototype.router;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthGuard = /** @class */ (function () {
        function AuthGuard(authService, router) {
            this.authService = authService;
            this.router = router;
        }
        /**
         * @param {?} next
         * @param {?} state
         * @return {?}
         */
        AuthGuard.prototype.canActivate = /**
         * @param {?} next
         * @param {?} state
         * @return {?}
         */
        function (next, state) {
            return this.authService.isAuthenticated().pipe(operators.tap((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (!result) {
                    alert("認証に失敗しました。メールアドレスとパスワードを再度確認してください。");
                    return;
                }
            })));
        };
        AuthGuard.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AuthGuard.ctorParameters = function () { return [
            { type: AuthService },
            { type: router.Router }
        ]; };
        return AuthGuard;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AuthGuard.prototype.authService;
        /**
         * @type {?}
         * @private
         */
        AuthGuard.prototype.router;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NavigationGuard = /** @class */ (function () {
        /**
        * コンストラクタ
        */
        function NavigationGuard(navigationService) {
            this.navigationService = navigationService;
        }
        /**
        * 画面遷移前処理
        * @return true/false
        */
        /**
         * 画面遷移前処理
         * @param {?} component
         * @return {?} true/false
         */
        NavigationGuard.prototype.canDeactivate = /**
         * 画面遷移前処理
         * @param {?} component
         * @return {?} true/false
         */
        function (component) {
            if (this.navigationService.getBackClicked()) {
                this.navigationService.setBackClicked(false);
                history.pushState(null, null, location.href);
                return false;
            }
            return true;
        };
        NavigationGuard.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NavigationGuard.ctorParameters = function () { return [
            { type: NavigationService }
        ]; };
        /** @nocollapse */ NavigationGuard.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NavigationGuard_Factory() { return new NavigationGuard(core.ɵɵinject(NavigationService)); }, token: NavigationGuard, providedIn: "root" });
        return NavigationGuard;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NavigationGuard.prototype.navigationService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShHttpClient = /** @class */ (function () {
        function ShHttpClient() {
        }
        ShHttpClient.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [
                            forms.FormsModule,
                            common.CommonModule,
                        ],
                        exports: [],
                        providers: []
                    },] }
        ];
        return ShHttpClient;
    }());

    exports.Alert = Alert;
    exports.AlertHandlerService = AlertHandlerService;
    exports.ApiResponse = ApiResponse;
    exports.ApiResponseBody = ApiResponseBody;
    exports.AuthGuard = AuthGuard;
    exports.AuthService = AuthService;
    exports.LoggerService = LoggerService;
    exports.NavigationGuard = NavigationGuard;
    exports.NavigationService = NavigationService;
    exports.Response = Response;
    exports.SHMessage = SHMessage;
    exports.SHMessageConfirm = SHMessageConfirm;
    exports.SHMessageFatal = SHMessageFatal;
    exports.SHMessageInfo = SHMessageInfo;
    exports.SHMessageUtl = SHMessageUtl;
    exports.SH_BROWSER_STORAGE = SH_BROWSER_STORAGE;
    exports.ShHttpClient = ShHttpClient;
    exports.ShHttpClientConst = ShHttpClientConst;
    exports.ShHttpClientService = ShHttpClientService;
    exports.ShRedirectService = ShRedirectService;
    exports.USE_HASH = USE_HASH;
    exports.ValidationErrorService = ValidationErrorService;
    exports.VersionNo = VersionNo;
    exports.VersionService = VersionService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=sh-http-client.umd.js.map
